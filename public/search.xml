<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[EIE2050 Week11]]></title>
    <url>%2F2019%2F11%2F30%2Fnote%2FEIE2050%2FEIE2050-Week11%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[EIE2050 Week10]]></title>
    <url>%2F2019%2F11%2F30%2Fnote%2FEIE2050%2FEIE2050-Week10%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[CSC3001 Week13]]></title>
    <url>%2F2019%2F11%2F30%2Fnote%2FCSC3001%2FCSC3001-Week13%2F</url>
    <content type="text"><![CDATA[Counting by Mapping FunctionsF is a function that takes an element in “input set” and output an element in the “output set”. What’s important is that there is only one output for each input. The domain(input) of f is A, the range(output) of f is f(A), the codomain of f is $B \supseteq f(A)$ For each input there is exactly one output. Injections$f: A \rightarrow B$ is injective if no two inputs have the same output. Surjections$f: A \rightarrow B$ is surjective if every output is possible. Bijections$f: A \rightarrow B$ is bijective if it is both surjective and injective. Bijection RuleIf f is a bijection from A to B, then |A| = |B|. Power SetPow(S) = the power set of S = the set of all subsets of S. Power Set and Binary StringsWe define a bijection f between subsets and binary strings by the following way: Given a subset $T \subseteq S$, we define f(T) as an n-bit string such that the i-th bit equal to 1 if and only if $s_i \in T$. This mapping is a bijection. Therefore, |A| = |B|, where |B| can be computed directly. Use BijectionSteps: Come up with B. Come up with f. Show f is a bijection. Compute |B|. Division RuleIf a function from A to B is k-to-1, meaning that each element in B is mapped by exactly k elements in A then |A| = k|B| This generalizes the bijection rule. Catalan NumberMonotone PathA monotone path from (0,0) to (n,n) is a path consisting of “right” moves (x-coordinate +1) and “up” moves (y-coordinate +1), starting at (0,0) and ending at (n,n). We can map a “right” move to an “x” and a “up” move to a “y”. There is a bijection between monotone paths and words n x’s and n y’s. And so the answer is just $\binom{2n}{n}$. A monotone path is called lower-right if any point $(x_i ,y_i)$ on the path has $x_i \geq y_i$ We can know that the size of the set is equal to Catalan Number: $r_n = \frac{1}{n+1}\binom{2n}{n}$ Proof: The idea is to define a bijection between: (A) The set of non-lower-right monotone paths from (0,0) to (n,n) (B) The set of monotone paths from (0,0) to (n-1,n+1) Clearly, $|B| = \binom{2n}{n+1}$ Injection: Every path in (A) must “cross” the diagonal at least once. We look at the first “crossing”, and then “flip the path”. Surjection: Given a monotone path from (0,0) to (n-1,n+1), it must cross the diagonal. Look at the first such point and flip it, we get back a non-lower-right monotone path from (0,0) to (n,n), which is the preimage of the map. So the size = $\binom{2n}{n}-\binom{2n}{n+1} = \frac{(2n)!}{n!n!}-\frac{(2n)!}{(n+!!)(n-1)!} = \frac{(2n)!}{(n+1)!n!} = \frac{1}{n+1}\binom{2n}{n}$]]></content>
      <tags>
        <tag>CSC3001</tag>
        <tag>Discrete Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3001 Week12]]></title>
    <url>%2F2019%2F11%2F30%2Fnote%2FCSC3001%2FCSC3001-Week12%2F</url>
    <content type="text"><![CDATA[Combinatorial Proofs and its PrinciplesCombinatorics is a typical technique in discrete mathematics. This technique is proved very useful in counting and enjoys wide range applications from evolutionary biology to computer science, etc. Binomial Coefficients, Combinational ProofBinomial Theorem$(1+x)^n = c_0 + c_1x + c_2x^2 + \dots + c_nx^n$ Each term corresponds to selecting 1 or x from each of the n factors. So the coefficient $c_k$ corresponds to the number of ways for choosing k positions of x from n factors. Therefore, $c_k = \binom{n}{k}$, these are called the binomial coefficients $(1+x)^n = \binom{n}{0} + \binom{n}{1}x + \binom{n}{2}x^2 + \dots + \binom{n}{n}x^n$ We see that the coefficients are the sums of two coefficients in the upper level. This is called the Pascal’s formula. Binomial CoefficientsIn general we have the following identity: $(y+x)^n = \binom{n}{0}y^n + \binom{n}{1}xy^{n-1} + \dots + \binom{n}{n}x^n$ because if we choose k x’s then there will be n-k y’s. Corollary When x = 1, y = 1, it implies that $2^n = \binom{n}{0} + \binom{n}{1} + \dots + \binom{n}{k} + \dots + \binom{n}{n}$, that is, the sum of the binomial coefficients is equal to $2^n$. When x = -1, y = 1, it implies that $0 = \binom{n}{0} - \binom{n}{1} + \binom{n}{2} - \binom{n}{3} + \binom{n}{4} + \dots + (-1)^n\binom{n}{n}$, that is, The sum of “odd” binomial coefficients equals to the sum of “even” binomial coefficients. Proving Identities$\binom{n}{k} = \binom{n}{n-k}$ Direct Proof: $\binom{n}{k} = \frac{n!}{k!(n-k)!} = \binom{n}{n-k}$ Combinational Proof: Number of ways to choose k items from n items equals to number of ways to choose n-k items from n items. Combinational ProofA combinatorial proof is an argument that establishes algebraic facts by counting principles. Many such proofs follow the same basic outline: Define a set S. Show that |S| = n by counting one way. Show that |S| = m by counting another way. Conclude that n = m. Pascal’s Formula$\binom{n+1}{k} = \binom{n}{k-1} + \binom{n}{k}$ Combinatorial proof: LHS = number of ways to choose k elements from n+1 elements For RHS, fix an element x in the n+1 elements. 1) If the k elements contain x, then we need to choose k-1 elements from the remaining n elements, so$\binom{n}{k-1}$. 2) If the k elements do not contain x, then we need to choose k elements from the remaining n elements, so $\binom{n}{k}$. Hence, we complete the proof. Inclusion-exclusion PrincipleThe inclusion-exclusion formula for the union of n sets:$$|\cup^n_{i=1}A_i| = \sum^n_{i=1}|A_i| - \sum_{1 \leq i \leq j \leq n}|A_i \cap A_j| + \sum_{1 \leq i \leq j \leq k \leq n}|A_i \cap A_j \cap A_k| + \dots + (-1)^{n+1}|A_1 \cap \dots \cap A_n|$$ Pigeonhole PrincipleA function from a larger set to a smaller set cannot be injective. (There must be at least two elements in the domain that are mapped to the same element in the range.) Generalized Pigeonhole PrincipleIf n pigeons and h holes, then some hole has at least $\lceil \frac{n}{h}\rceil$ pigeons.]]></content>
      <tags>
        <tag>CSC3001</tag>
        <tag>Discrete Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3001 Week11]]></title>
    <url>%2F2019%2F11%2F30%2Fnote%2FCSC3001%2FCSC3001-Week11%2F</url>
    <content type="text"><![CDATA[Graph ColoringGraph ColoringGraph Coloring Problem: Given a graph, color all the vertices so that adjacent vertices get different colors. Objective: use minimum number of colors. Defintion: A graph is k-colorable if its vertices can be colored by k different colors so that adjacent vertices get different colors. Optimal ColoringDefinition: min # colors for G is chromatic number, $\chi(G)$, $\chi(G) &gt; 0$. When there is no edges in a graph, the chromatic number is 1. Simple Cycles $\chi(C_{even}) = 2$, $\chi(C_{odd}) = 3$ Complete GraphsA graph is complete if there is an edge between every pair of distinct vertices. We usually denote the complete graph of n vertices by $K^n$. $\chi(K_n) = n$ WheelsWith one vertex in the middle to connect every vertexes on the “edge” of the graph. $\chi(W_{odd}) = 4$, $\chi(W_{even}) = 3$ With one distinct color in the middle and 2/3 colors for even/odd cycles on the “edge”. TreesClaim: $\chi$(a tree with two or more vertices) = 2. Proof: Consider such a tree G and pick a vertex u as the “root”. The unique path between a vertex and u is of length either even or odd, it follows that all vertices will be colored by this process. So G is 2-colorable, and $\chi(G) \leq 2$. But adjacent vertices need to be colored differently, so $\chi(G) \geq 2$. Hence, $\chi(G) = 2$. Bipartite GraphsFact: A graph is 2-colorable if and only if it is bipartite. Theorem: A graph is bipartite if and only if it has no odd cycle. Estimate Chromatic NumberIf there is a complete subgraph of size k, then we need at least k colors. Let $\omega(G)$ be the largest size of a complete subgraph that G contains. $\chi(G) \geq \omega(G)$ But $\chi(G)$ could be arbitrarily large when $\omega(G)$ is relatively small, so $\omega(G)$ is not a good estimate for $\chi(G)$ ApplicationsFlight GatesConflict GraphEach vertex represents a flight, and each edge represents a conflict. Fact: The flights can be scheduled using k gates iff this graph is k-colorable. Exam Scheduling Subjects conflict if student takes both, so they need different time slots. How short can the exam period be? This is a graph coloring problem. Each course is a vertex, two courses are adjacent if there is a conflict. The exams can be scheduled in k slots if and only if the graph is k-colorable. Register Allocation Given a program, we want to execute it as quickly as possible. Calculations can be done most quickly if the values are stored in registers. But registers are very expensive, and there are only a few in a computer. Therefore, we need to use the registers effectively. This is a graph coloring problem To model this problem: The live range of each variable is a vertex. Add an edge when two live ranges overlap. Summary To model a problem as a graph coloring problem, a standard recipe is to think of your resource (e.g. gates, time slots, registers) as colors, each object (e.g. flight, course, live range) as a vertex, and each edge as a conflict. Then, using fewest colors to color all the vertices is equivalent to using minimum amount of resource for all the objects so that there would be no conflicts. Some Positive ResultsMaximum DegreeSuppose every vertex is of degree at most d, one can color it using at most d+1 colors. This is just a sufficient condition, we can generalize it to Maximum Degree Ordering. Maximum Degree OrderingClaim: Suppose there is an ordering of the vertices $v_1 , \dots, v_n$ , such that each vertex has at most d fore neighbors. Then the graph can be colored by d+1 colors. fore neighbor: If we put all the vertexes into a line, neighbors that is in the left/right(pre-determine) of that vertex is it’s fore neighbor. Proof: We color the vertices one by one following the ordering. For each vertex $v_i$ , its fore neighbors are colored by at most d colors. Hence we can color vi using the d+1-th color. It follows that all vertices can be colored by d+1 colors. Construct such ordering: Just pick any vertex of degree at most d, put it at the end and repeat. Interval GraphsInterval Graphs are conflict graphs of intervals. For interval graphs, minimum number of colors need = maximum size of a complete subgraph. TheoremFor interval graph G, $\chi(G)$ = $\omega(G)$. ProofFrom the above we know that $\chi(G) \geq \omega(G)$, so we just need to prove that $\chi(G) \leq \omega(G)$. Lemma: In an interval graph G, there is a vertex of degree at most $\omega(G) - 1$. Let $k = \omega(G)$. We will show that there is a vertex with degree k-1. Let v be the interval with leftmost right endpoint (earliest finishing time). Any interval that intersects v must intersect v at the right endpoint. All the intervals that intersect v must intersect with each other, and thus they form a complete subgraph. Since $\omega(G) = k$, this complete subgraph is of size at most k, and thus v has at most k-1 neighbors. Therefore, v is a vertex of degree at most k-1. Proof of the Theorem: Pick the vertex v chosen in the Lemma. Remove this vertex (and its incident edges) from the graph. The resulting graph is also an interval graph, but smaller. There is also a vertex of degree at most k-1 in this resulting graph. Repeat 1-2 until the resulting graph becomes a single vertex. So we have found an ordering of vertices with at most k-1 fore neighbors each. (exactly the same as before) Therefore, the graph is k-colorable. Planar GraphsDefinitionMap Coloring: Color the map using minimum number of colors so that adjacent countries always have distinct colors. Theorem: Every map is 4-colorable. Planar Graphs: A graph is planar if there is a way to draw it in a plane without edges crossing. Euler’s FormulaIf a connected planar graph has n vertices, m edges, and f faces, then n – m + f = 2 FaceFace: A face of a planar graph is a region surrounded by a cycle such that the region doesn’t contain any vertices and edges. Face Length: The face length of a face is the number of edges in its face boundary Bridge: A single edge that connects two faces. Dongle: A cycle but has vertexes inside. Euler’s FormulaDefinitionIf a connected planar graph has n vertices, m edges, and f faces, then n – m + f = 2 ProofProof by induction on the number of vertices. Base Case: (n = 1) f = m+1 Inductive Step: (n &gt; 1) Number of faces is the same, although some faces get smaller. By assumption, n’-m’+f’=2. This implies n-m+f=2. Further QuestionsIs the number of faces always the same for different drawings of the same graph? YES, because isomorphic graphs preserve (simple) cycles. What if the graph is disconnected, say it has k connected components? $n = \sum n_i , m = \sum m_i , f = \sum f_i - (k - 1) \Rightarrow n - m + f = k + 1$ 6-coloringTheoremEvery planar graph is 6-colorable. ProofSteps Show that there are at most 3n-6 edges in a planar graph. Show that there is a vertex of degree 5. Show that there is a 6-coloring. Claim 1Claim: If G is a simple planar graph with at least 3 vertices, then $m \leq 3n-6$ Proof: Let $F_1, \dots, F_f$ be the face lengths. Note that $2m = \sum^f_{i=1}F_i$ Since the graph is simple, $F_i \geq 3$ for each i. So $2m \geq 3f$ Since m = n + f - 2 $m \leq 3n -6$ Claim 2Claim: Every simple planar graph has a vertex of degree at most 5. Proof: Suppose every vertex has degree at least 6. By Handshaking Lemma, m ≥ 6n/2 = 3n, a contradiction. So there exists a vertex v of degree at most 5. Claim 3Claim: Every planar graph is 6-colorable. Proof: Proof by induction on the number of vertices. Let v be a vertex of degree at most 5. Remove v from the planar graph G. Note that G-v is still a planar graph. By assumption G-v is 6-colourable. Since v has at most 5 neighbors, we can always color v using the 6-th color.]]></content>
      <tags>
        <tag>CSC3001</tag>
        <tag>Discrete Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3100 Week14]]></title>
    <url>%2F2019%2F11%2F29%2Fnote%2FCSC3100%2FCSC3100-Week14%2F</url>
    <content type="text"><![CDATA[Dynamic ProgrammingDefinition An algorithm design technique (like divide and conquer) Used for Optimization Problems A set of choices must be made to get an optimal solution Find a solution with the optimal value (minimum or maximum) There may be many solutions that lead to an optimal value Our goal: find an optimal solution Applicable when subproblems are not independent(Subproblems share subsubproblems) Procedure Understand the structure of an optimal solution Recursively define the optimal solution Compute the value of an optimal solution in a bottom-up fashion Construct an optimal solution from computed information (not always necessary) ExamplesAssembly Line SchedulingAutomobile factory with two assembly lines: Each line has n stations: $S_{1,1}, \dots , S_{1,n}$ and $S_{2,1}, \dots , S_{2,n}$ Corresponding stations $S_{1, j}$ and $S_{2, j}$ perform the same function but can take different amounts of time $a_{1, j}$ and $a_{2, j }$ Entry times are: $e_1$ and $e_2$; exit times are: $x_1$ and $x_2$ After going through a station, can either: stay on same line at no cost, or transfer to other line: cost after $S_{i,j}$ is $t_{i,j}$ , $j = 1, \dots , n - 1$ Problems: What stations should be chosen from line 1 and which from line 2 in order to minimize the total time through the factory for one car? Brute Force Solution Enumerate all possibilities of selecting stations Compute how long it takes in each case and choose the best one There are $2^n$ possible ways to choose stations, unacceptable when n is large Dynamic ProgrammingStructure of the Optimal SolutionLet’s consider all possible ways to get from the starting point through station $S_{1,j}$ We have two choices of how to get to $S_{1,j}$: Through $S_{1,j-1}$, then directly to $S_{1,j}$ Through $S_{2,j-1}$, then transfer over to $S_{1,j}$ Optimal Substructure Generalization: an optimal solution to the problem “find the fastest way through $S_{1, j}$” contains within it an optimal solution to subproblems: “find the fastest way through $S_{1, j - 1}$ or $S_{2, j – 1}$”. This is referred to as the optimal substructure property We use this property to construct an optimal solution to a problem from optimal solutions to subproblems A Recursive Solution Define the value of an optimal solution in terms of the optimal solution to subproblems *Definitions: * $f^*$ : the fastest time to get through the entire factory $f_i[j]$ : the fastest time to get from the starting point through station $S_{i,j}$ $f^* = min (f_1[n] + x_1, f_2[n] + x_2)$ Base Case: j = 1, i = 1, 2 $f_1[1] = e_1 + a_{1,1}$ $f_2[1] = e_2 + a_{2,1}$ General Case: $j = 2, 3, \dots, n$ and i = 1, 2 Fastest way through $S_{1, j}$ is either: the way through $S_{1, j - 1}$ then directly through $S_{1, j}$: $f_1[j - 1] + a_{1,j}$ the way through $S_{2, j - 1}$, transfer from line 2 to line 1, then through $S_{1, j}$: $f_2[j -1] + t_{2,j-1} + a_{1,j}$ So $f_1[j] = min(f_1[j - 1] + a_{1,j} ,f_2[j -1] + t_{2,j-1} + a_{1,j})$ Summary: $$\begin{equation}f_1[j]=\left{\begin{aligned}e_1 + a_{1, 1} &amp; , &amp; \text{if j=1} \\text{min}(f_1[j - 1] + a_{1,j} ,f_2[j -1] + t_{2,j-1} + a_{1,j}) &amp; , &amp; \text{if j} \geq 2 \\end{aligned}\right.\end{equation}$$ $$\begin{equation}f_2[j]=\left{\begin{aligned}e_2 + a_{2, 1} &amp; , &amp; \text{if j=1} \\text{min}(f_2[j - 1] + a_{2,j} ,f_1[j -1] + t_{1,j-1} + a_{2,j}) &amp; , &amp; \text{if j} \geq 2 \\end{aligned}\right.\end{equation}$$ Computing the Optimal SolutionSolving top-down would result in exponential running time. For j $\geq$ 2, each value $f_i[j]$ depends only on the values of $f_1[j – 1]$ and $f_2[j - 1]$ Bottom-Up Approach First find optimal solutions to subproblems Find an optimal solution to the problem from the subproblems Use Bottom-Up Approach can compute the optimal solution in O(n) Construct an Optimal SolutionLook back from Top to Bottom to find a path then construct the optimal solution. Matrix-Chain MultiplicationProblem: given a sequence $&lt;A_1, A_2, \dots , A_n&gt;$, compute the product: $A_1 \cdot A_2 \dots A_n$ Matrix compatibility:$$\begin{align}C = A \cdot B &amp; &amp; C=A_1 \cdot A_2 \dots A_i \cdot A_{i+1} \dots A_n \col_A = row_B &amp; &amp; col_i = row_{i+1} \row_C = row_A &amp; &amp; row_C = row_{A_1} \col_C = col_B &amp; &amp; col_C = col_{A_n} \\end{align}$$ In what order should we multiply the matrices? We can parenthesize the product to get the order in which matrices are multiplied We should choose the order in which we multiply the matrices has a significant impact on the cost of evaluating the product The order can make a huge difference in the time cost. As the above example, it’s also inefficient to use brute force solution as the number of paranthesizations grows as $\Omega(2^n)$, because $P(n) = \left{\begin{align}1&amp;&amp;n=1 \ \sum^{n-1}_{k=1} p(k)p(n-k)&amp;&amp;n \geq 2\end{align}\right.$ Structure of the Optimal SolutionNotation: $A_{i\dots j} = A_i A_{i+1} \dots A_{j}, i \leq j$ So we can easily get that: $A_{i\dots j} = A_{i\dots k} A_{k+1\dots j}$ Optimal Structure The parenthesization of the “prefix” $A_{i\dots k}$ must be an optimal parenthesization If there were a less costly way to parenthesize $A_{i\dots k}$ , we could substitute that one in the parenthesization of $A_{i\dots j}$ and produce a parenthesization with a lower cost than the optimum $\Rightarrow$ contradiction! An optimal solution to an instance of the matrix-chain multiplication contains within it optimal solutions to subproblems A Recursive SolutionSubproblem: determine the minimum cost of parenthesizing $A_{i\dots j} = A_i A_{i+1} \dots A_j$ for $1 \leq i \leq j \leq n$ Let m[i, j] = the minimum number of multiplications needed to compute $A_{i…j}$ full problem ($A_{1\dots n}$): m[1, n] i = j: $A_{i\dots i}$ = Ai $\Rightarrow$ m[i, i] = 0, for i = 1, 2, …, n Assume that the optimal parenthesization splits the product $A_i A_{i+1} \dots A_j$ at k ($i \leq k &lt; j$) So $[i, j] = m[i, k] + m[k+1, j] + p_{i-1}p_kp_j$ $$\begin{equation}m[i, j]=\left{\begin{aligned}0 &amp; , &amp; \text{if i=j} \\min_{i \leq k &lt; j}{m[i, k] + m[k+1, j] + p_{i-1}p_kp_j} &amp; , &amp; \text{if i &lt; j} \\end{aligned}\right.\end{equation}$$ Computing the Optimal CostsComputing the optimal solution recursively takes exponential time, and same subproblems will be computed for multiple times. Idea: fill in m such that it corresponds to solving problems of increasing length Take an example: Memoization Top-down approach with the efficiency of typical dynamic programming approach Maintaining an entry in a table for the solution to each subproblem memoize the inefficient recursive algorithm When a subproblem is first encountered its solution is computed and stored in that table Subsequent “calls” to the subproblem simply look up that value Dynamic Progamming vs. Memoization dvantages of dynamic programming No overhead for recursion Advantages of memoized algorithms Each programming Some subproblems do not need to be solved Summary Both the dynamic programming approach and the memoized algorithm can solve the matrix-chain multiplication problem in $O(n^3)$ Both methods take advantage of the overlapping subproblems property There are only $\Theta(n^2)$ different subproblems Solutions to these problems are computed only once Without memoization the natural recursive algorithm runs in exponential time ElementsOptimal Substructure An optimal solution to a problem contains within it optimal solutions of subproblems Optimal solution to the entire problem is build in a bottom-up manner from optimal solutions of subproblems Overlapping Subproblems If a recursive algorithm revisits the same subproblems over and over $\Rightarrow$ the problem has overlapping subproblems Parameters of Optimal Substructure How many subproblems are used in an optimal solution for the original problem Assembly line: One subproblem (the line that gives best time) Matrix multiplication: Two subproblems (subproducts $A_{i\dots k}$, $A_{k+1 \dots j}$) How many choices we have in determining which subproblems to use in an optimal solution Assembly line: Two choices (line 1 or line 2) Matrix multiplication: j - i choices for k (splitting the product) The running time of a DP algorithm depends on two factors: Number of subproblems overall How many choices we look at for each subproblem Assembly line $\Theta (n)$ subproblems (n stations) 2 choices for each subproblem $\Theta (n)$ overall Matrix multiplication: $\Theta (n^2)$ subproblems ($1 \leq i \leq j \leq n$) At most n-1 choices $\Theta (n^3)$ overall Longest Common SubsequenceDefinitionGiven two sequences: $X = &lt;x_1, x_2, \dots, x_m&gt;$ $Y = &lt;y_1, y_2, \dots, y_n&gt;$ find a maximum length common subsequence (LCS) of X and Y Subsequence means that elements in it are in order but not necessary in consecutive order. Applications Sequence comparison among species Brute-Force Solution For every subsequence of X (length m), check whether it’s a subsequence of Y (length n) There are $2^m$ subsequences of X to check Each subsequence takes $\Theta(n)$ time to check scan Y for first letter, from there scan for second, and so on Running time: $\Theta(n2^m)$ Optimal SolutionStructure of the Optimal Solution If the last element is equal Include one element into the common sequence and solve the resulting subproblem If the last element is not equal Exclude an element from a string and solve the resulting subproblem Notations Given a sequence $X = &lt;x_1, x_2, \dots , x_m&gt;$ we define the i-th prefix of X, for i = 0, 1, 2, …, m: $X_i = &lt;x_1, x_2, \dots , x_i&gt;$ c[i, j] = the length of a LCS of the sequences $X_i = &lt;x_1, x_2, \dots , x_i&gt;$ and $Y_j = &lt;y_1, y_2, \dots , y_j&gt;$ A Recursive SolutionCase 1: the last element is equal$x_i = y_j$ $c[i, j] = c[i - 1, j - 1] + 1$ Append $x_i = y_j$ to the LCS of $X_{i-1}$ and $Y_{j-1}$ Must find a LCS of $X_{i-1}$ and $Y_{j-1}$ Case 2: the last element is not equal$x_i \not= y_j$ $c[i, j] = \max{ c[i - 1, j], c[i, j-1]}$ Must solve two subproblems find a LCS of $X_{i-1}$ and $Y_j$ find a LCS of $X_i$ and $Y_{j-1}$ Overlapping Subporblems To find an LCS of X and Y we may need to find the LCS between X and $Y_{n-1}$ and that of $X_{m-1}$ and Y Both the above subproblems has the subproblem of finding the LCS of $X_{m-1}$ and $Y_{n-1}$ Subproblems share subsubproblems Computing the length of the LCS$$\begin{equation}c[i, j]=\left{\begin{aligned}0 &amp; , &amp; \text{if i=0 or j=0} \c[i-1, j-1] + 1 &amp; , &amp; \text{if }x_i = y_j \\max(c[i, j-1], c[i-1, j]) &amp; , &amp; \text{if }x_i \not= y_j \\end{aligned}\right.\end{equation}$$ Additional Information Constructing a LCS Start at b[m, n] and follow the arrows When we encounter a “$\nwarrow$“ in b[i, j] $\Rightarrow$ $x_i = y_j$ is an element of the LCS Imporving the Code If we only need the length of the LCS LCS-LENGTH works only on two rows of c at a time The row being computed and the previous row We can reduce the asymptotic space requirements by storing only these two rows The Shortest Path]]></content>
      <tags>
        <tag>CSC3100</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3100 Week13]]></title>
    <url>%2F2019%2F11%2F29%2Fnote%2FCSC3100%2FCSC3100-Week13%2F</url>
    <content type="text"><![CDATA[Minimum Spanning TreeDefinitions Spanning Tree A tree (i.e., connected, acyclic graph) which contains all the vertices of the graph Minimum Spanning Tree Spanning tree with the minimum sum of weights Spanning forest If a graph is not connected, then there is a spanning tree for each connected component of the graph Applications Find the least expensive way to connect a set of cities, terminals, computers, etc. Properties Minimum spanning tree is not unique MST has no cycles – see why: We can take out an edge of a cycle, and still have the vertices connected while reducing the cost # of edges in a MST: |V| - 1]]></content>
      <tags>
        <tag>CSC3100</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EIE2050 Week9]]></title>
    <url>%2F2019%2F11%2F10%2Fnote%2FEIE2050%2FEIE2050-Week9%2F</url>
    <content type="text"></content>
      <categories>
        <category>note</category>
        <category>EIE2050</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[EIE2050 Week8]]></title>
    <url>%2F2019%2F11%2F10%2Fnote%2FEIE2050%2FEIE2050-Week8%2F</url>
    <content type="text"></content>
      <categories>
        <category>note</category>
        <category>EIE2050</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[EIE2050 Week7]]></title>
    <url>%2F2019%2F11%2F10%2Fnote%2FEIE2050%2FEIE2050-Week7%2F</url>
    <content type="text"></content>
      <categories>
        <category>note</category>
        <category>EIE2050</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CSC3001 Week10]]></title>
    <url>%2F2019%2F11%2F10%2Fnote%2FCSC3001%2FCSC3001-Week10%2F</url>
    <content type="text"><![CDATA[Graph MatchingMatchingMatching’ goal is to “match” in a “good” way.Stable MatchingGiven a matching M for the vertex set V, the pair (v,w) is unstable if (v, w’) and (v’, w) are matched pairs in M, where v $\not=$ v’, w $\not=$ w’. v prefers w rather than w’. w prefers v rather than v’. Stable Matching: A stable matching is a matching with no unstable pair, and every item is matched. Stable Roommate Problem: There are 2n people. There are n rooms, each can accommodate 2 people. Each person has a preference list of 2n-1 people. Find a stable matching (match everyone and no unstable pairs). To solve Stable Matching Problem is easier than solve Stable Roommate Problem, because we only need to satisfy one side. There is always a stable matching in the stable matching problem.(Gale,Shapley[1962]) The proof is based on a Marrying Procedure. Marrying Procedure Morning: boy propose to their favourite girl. Afternoon: girl rejects all but favourite. Evening: rejected boy writes off the girl. This procedure is then repeated until all boys propose to a different girl. So what we need to check now is: The procedure will terminate Everyone is married No unstable pairs Claim 1: The procedure will terminate in at most $n^2$ days. If every girl is proposed by at most one boy, then all girls are married (since #boys = #girls), so the procedure will terminate. Otherwise, there must be a girl receiving more than one proposal. She will reject at least one boy in this case. These boys will write off that girl from their lists, and propose to their next favourite girls. There are n boys whose list has n girls, and at least one name will be written off each day. So the procedure will last for at most $n^2$ days. Claim 2: Everyone is married when the procedure ends. Proof (by contradiction). Suppose B is not married and his list is empty. Then B was rejected by all girls. A girl rejects a boy only if she already has a more preferable partner. So every girl has her own partner. That is, all girls are married, but some boys are not. This implies boys are more than girls, a contradiction. Claim 3: There are no unstable pair. Case 1: G is the first choice for B: Then B married to his most favourite. So B has no incentive to leave. Case 2: G is not B’s first choice: If (B,G’) is unstable, then B prefers G’ than G. So G’ rejected B before. That is, G’ prefers her current partner than B. So G’ has no incentive to leave. So by Claim 1, Claim 2 and Claim 3, the Gale-Shapley Theorem is proved. More QuestionsUniquenessStable matching is not always unique when exists. Boys and Girls All boys get the best partners! All girls get the worst partners! The marrying procedure will always choose the boy optimal one when situation like the above happens Bipartite MatchingProblemThe Bipartite Marriage Problem: There are n boys and n girls. Each boy/girl can only marry to some girls/boys. Goal: To maximize the number of matched pairs. Graph ProblemA graph is bipartite if its vertex set can be partitioned into two subsets A and B so that each edge has one endpoint in A and the other endpoint in B. A matching is a subset of edges so that every vertex has degree at most one. Maximum MatchingThe bipartite matching problem: Find a matching with the maximum number of edges. A perfect matching is a matching that every vertex is matched (i.e. of degree 1). The perfect matching problem: Is there a perfect matching? Some Notations Let S be a subset of vertices of a graph. (e.g. a bipartite graph) We denote the neighbor set of S by N(S) = { v | v is a neighbor of some vertex in S}. So |S| is the number of vertices in S, and |N(S)| is the number of neighbors of S. If |N(S)| &lt; |S| for some S, then it is impossible to have a perfect matching. In other words, in order to have a perfect matching, a necessary condition is that for each subset S on either side, we must have |N(S)| $\geq$ |S|. Hall’s TheoremA bipartite graph G=(V,W;E) has a perfect matching if and only if |N(S)| ≥ |S| for each subset S of V and for each subset S of W. Proof of Hall’s TheoremHall’s Theorem: A bipartite graph G=(V,W;E) has a perfect matching if and only if |N(S)| ≥ |S| for every subset S of V and W. If S = V, then |V| $\leq$ |N(V)| $\leq$ |W|. If S = W, then |W| $\leq$ |N(W)| $\leq$ |V|. So the theorem can be restated as: Hall’s Theorem: A bipartite graph G=(V,W;E) with |V|=|W| has a perfect matching if and only if |N(S)| ≥ |S| for every subset S of V.]]></content>
      <categories>
        <category>note</category>
        <category>CSC3001</category>
      </categories>
      <tags>
        <tag>CSC3001</tag>
        <tag>Discrete Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3001 Week8]]></title>
    <url>%2F2019%2F11%2F10%2Fnote%2FCSC3001%2FCSC3001-Week8%2F</url>
    <content type="text"><![CDATA[Introduction to GraphsGraphs, DegreesTypes of GraphsSimple GraphNo multiedges, no loops, no directed edges:Directed GraphMulti-graph Unless otherwise specified, all graphs in this course are simple. Simple GraphA graph G=(V,E) consists of: A set of vertices, V A set of undirected edges, E V(G) = {a,b,c,d,e,f} E(G) = {ad,af,bd,be,cd,ce,df} The vertices a,b are adjacent (neighbours) if the edge ab is present. Vertex DegreesAn edge uv is incident with the vertex u and the vertex v. The neighbour set N(v) of a vertex v is the set of vertices adjacent to it. degree of a vertex = the number of incident edges (loops counted twice.) The degree of a vertex v = the number of neighbours of v? For multigraphs, NO. For simple graphs, YES. Handshaking LemmaFor any graph, sum of degrees = twice # edges Lemma: $2|E| = \sum_{v \in V} \text{deg}(v)$ Corollary: Sum of degree is an even number. Number of odd degree vertices is even. Proof: Each edge contributes 2 to the sum on the right. Q.E.D. Question: Given a degree sequence, if the sum of degree is even, is it true that there is always a graph with such a degree sequence? For simple graphs, NO, consider the degree sequence (3,1). For multigraphs (with self loops), YES! IsomorphismGraph IsomorphismAll that matters is the connections. Graphs with the same connections are isomorphic. Informally, two graphs are isomorphic if they are the same after renaming. Graph isomorphism has applications like fingerprint checking, molecules testing… $G_1$ isomorphic to $G_2$ means there is a one-to-one mapping (isomorphism) of the vertices that is edge-preserving. $\exists \text{ one-to-one mapping }f: V_1 \rightarrow V_2 \text{ u—v } \in E_1 \text{ iff f(u)—f(v)} \in E_2$ If $G_1$ and $G_2$ are isomorphic, they have the same: Vertices Edges Degree sequence Checking Graph IsomorphismTo show two graphs are isomorphic, find a mapping and show that it is edge preserving. To show two graphs are not isomorphic, find some isomorphic-preserving properties which is satisfied in one graph but not in the other. Path, Cycle, ConnectednessPath: Sequence of adjacent vertices. Simple Path: All vertices different. Connectedness Vertices v, w are connected if and only if there is a path starting at v and ending at w. A graph is connected iff every pair of vertices are connected. Every graph consists of disjoint connected pieces (called connected components) So a graph is connected if and only if it has only 1 connected component. Simple CyclesA (simple) cycle is a connected graph whose vertices are all of degree 2. In particular, for multigraphs, a loop is a cycle. Shortest PathsA path between u and v is shortest if it uses the minimum number of edges among all u-v paths. TreeForest: Graphs with no cycles Tree: Connected graphs with no cycles Leaf: a vertex of degree 1 Tree CharacterizationDefinition: A tree is a connected graph with no cycles. Claim: In a tree, there is a unique simple path between every pair of vertices. A tree cannot have no leaves A tree which have n vertices have m=n-1 edges Characterization by Paths:A graph is a tree if and only if there is a unique simple path between every pair of vertices. Characterization by Number of Edges:A graph is a tree if and only if it is connected and has n-1 edges. Eulerian CycleEuler’s Theorem A graph has an Eulerian path if and only if it is connected and has at most two vertices with an odd number of edges. A connected graph has an Eulerian path if and only if it has zero or two vertices with odd degrees. A connected graph has an Eulerian cycle if and only if every vertex is of even degree. All of the above are equal The technique can be easily generalized to multigraphs, but we only talk about simple graphs. Eulerian Cyclea cycle that visits each edge exactly once. Claim 1: If the edges of a connected graph can be partitioned into simple cycles, then we can construct an Eulerian cycle. Claim 2: If every vertex is of even degree, the edges can be partitioned into simple cycles. Proof: Let C be a simple cycle. Remove the edges in C from the graph G and call the new graph G’. So the degree of each vertex is either unchanged or decreased by two. So every vertex of the graph G’ is still of even degree. Note that G’ has fewer edges than G. In finite steps, G’ can be partitioned into simple cycles $C_1$ , $C_2$ , …, $C_k$. So the original graph G can be partitioned into simple cycles $C_1$ , $C_2$ , …, $C_k$. With Claim 1 and Claim 2, Euler’s Theorem can be proved. Odd-Degree Case in EulerianClaim 3: If a connected graph has two vertices of odd degree, then it has an Eulerian path. It can be easily proved. Till now we are done. Directed GraphsA digraph G=(V,A) consists of: a set of vertices, V a set of directed edges (arcs), A V(G) = {a,b,c,d,e,f} A(G) = {da, fa, db, eb, dc, ec, fd} For an arc uv, we say u is the tail of the arc and v is the head of the arc. Also, we say v is an out-neighbor of u, and u is an in-neighbor of v. In-Degrees and Out-DegreesThe out-degree of a vertex v is the number of out-neighbors of v; similarly, the in-degree of a vertex v is the number of in-neighbors of v. Directed PathsInformally, a directed path is a path that follows the arcs. Directed Path: sequence of vertices $v_1$ , $v_2$ , …, $v_k$ such that there is an arc from $v_i$ to $v_{i+1}$ for each i = 1, …, k-1. Simple Directed Path: a directed path with no repeated vertices. Directed CyclesA digraph is connected if replacing its arcs by undirected edges results in a connected simple graph. A directed cycle is a connected digraph that the out-degree and indegree are both 1 for every vertex.]]></content>
      <categories>
        <category>note</category>
        <category>CSC3001</category>
      </categories>
      <tags>
        <tag>CSC3001</tag>
        <tag>Discrete Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3100 Week12]]></title>
    <url>%2F2019%2F11%2F10%2Fnote%2FCSC3100%2FCSC3100-Week12%2F</url>
    <content type="text"><![CDATA[Shortest PathShortest PathProblems How can we find the shortest route between two points on a road map? Model the problem as a graph problem: Road map is a weighted graph: vertices = cities edges = road segments between cities edge weights = road distances Goal: find a shortest path between two vertices (cities) Input Directed Graph G = (V, E) Weight Function w: $E\rightarrow R$ Weight of the Path $p = &lt;v_0, v_1, \dots, v_k&gt;$ $w(p) = \sum^k_{i=1}w(v_{i-1}, v_{i})$ Shortest-path Weight from u to v: $$\begin{equation}\delta(u,v) = \min \left {\begin{aligned}w(p) &amp;&amp; \text{if there exists a path from u to v} \\infty &amp;&amp; \text{otherwise}\end{aligned}\right .\end{equation}$$ Note: there might be multiple shortest paths from u to v. Variants Single-source shortest paths G = (V, E) $\Rightarrow$ find a shortest path from a given source vertex s to each vertex $v \in V$ Single-destination shortest paths Find a shortest path to a given destination vertex t from each vertex v Reversing the direction of each edge $\Rightarrow$ single-source Single-pair shortest path Find a shortest path from u to v for given vertices u and v All-pairs shortest-paths Find a shortest path from u to v for every pair of vertices u and v Negative-Weight Edges Negative-weight edges may form negative-weight cycles If such cycles are reachable from the source, then $\delta(s, v)$ is not properly defined! Keep going around the cycle, and get $w(s, v) = - \infty$ for all v on the cycle CyclesShortest weight cannot contain cycles: Negative-weight cycles: Shortest path is not well defined Positive-weight cycles: By removing the cycle, we can get a shorter path Optimal Substructure TheoremAlgorithm]]></content>
      <categories>
        <category>note</category>
        <category>CSC3100</category>
      </categories>
      <tags>
        <tag>CSC3100</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3100 Week11]]></title>
    <url>%2F2019%2F11%2F10%2Fnote%2FCSC3100%2FCSC3100-Week11%2F</url>
    <content type="text"><![CDATA[Graph AlgorithmsConcepts and DefinitionsDefinition A graph G = (V, E) consists of a set of vertices, V, and a set of edges, E. Each edge (arc) is a pair (v, w), where v,w $\in$ V. An edge may have a weight (cost). If the pair is ordered, then the graph is directed graph. Vertex w is adjacent to v if and only if (v, w) $\in$ E. ApplicationCan be applicated in Maps, Schedules, Computer Networks, Htpertext and Circuits etc. Directed vs. UndirectedDirected Graph The in-degree of a vertex v is the number of edges (u, v) entering v. The out-degree of a vertex v is the number of edges (v, u) leaving v. Undirected Graph The degree of a vertex v is the number of edges connecting v Graph and Path Complete graph A graph with an edge between each pair of vertices Subgraph A graph $(V’, E’)$ such that $V’ \subseteq V$ and $E’\subseteq E$ Path from v to w A sequence of vertices $&lt;v_0, v_1, \dots, v_k&gt;$ such that $v_0=v$ and $v_k=w$ Length of a path Number of edges in the path w is reachable from v If there is a path from v to w Simple path All the vertices in the path are distinct Cycles Cycles A path $&lt;v_0, v_1, \dots, v_k&gt;$ forms a cycle if $v_0=v_k$ and $k\geq 2$ Acyclic graph A graph without any cycles Connected vs. Strongly Connected A graph is connected if there is a path from every vertex to every other vertex. A directed graph with this property is called strongly connected. If a directed graph is not strongly connected, but the underlying graph (without direction to the edges) is connected, then the graph is said to be weakly connected. Examples of graph models include Computer networks; Job scheduling Tree and Graph A tree is a connected, acyclic “undirected” graph Bipartite Graph A bipartite graph is an undirected graph G = (V, E) in which $V = V_1 + V_2$ and there are edges only between vertices in $V_1$ and $V_2$ Graph RepresentationAdjacency Matrix RepresentationDefinition Assume vertices are numbered 1, 2, … , |V| The representation consists of a matrix $A_{|V|\times |V|}$: $$\begin{equation}a_{ij} = \left {\begin{aligned}1 &amp;&amp; \text{if (i, j)} \in E\0 &amp;&amp; \text{otherwise}\end{aligned}\right .\end{equation}$$ For undirected graphs, matrix A is symmetric: $a_{ij} = a_{ji}$ $A = A^T$ Properties Memory required $\Theta(V^2)$, independent on the number of edges in G Preferred when The graph is dense: $|E|$ is close to $|V|^2$ We need to quickly determine if there is an edge between two vertices Time to determine if $(u, v) \in E$: $\Theta(1)$ Disadvantage Waste space for spare graphs No quick way to determine the vertices adjacent to another vertex. Time to list all vertices adjacent to u: $\Theta(V)$ Adjacency List RepresentationDefinition An array of |V| lists, one for each vertex in V Each list Adj[u] contains all the vertices v that are adjacent to u (i.e., there is an edge from u to v) Can be used for both directed and undirected graphs Properties Sum of “lengths” of all adjacency lists Directed graph: |E| edge (u, v) appears only once (i.e., in the list of u) Undirected graph: 2|E| edge (u, v) appears twice (i.e., in the lists of both u and v) Memory required $\Theta(V + E)$ Preferred when The graph is sparse: $|E| \ll |V|^2$ We need to quickly determine the nodes adjacent to a given node. Disadvantage No quick way to determine whether there is an edge between node u and v Time to determine if $(u, v) \in E$: O(degree(u)) Time to list all vertices adjacent to u: $\Theta$(degree(u))​ Representation in Weighted Graph Graphs for which each edge has an associated weight w(u, v) w: E $\Rightarrow$ R, weight function Storing the weights of a graph Adjacency list: Store w(u, v) along with vertex v in u’s adjacency list Adjacency matrix: Store w(u, v) at location (u, v) in the matrix Topological Sort An ordering of all vertices in a directed acyclic graph, such that if there is a path from $v_i$ to $v_j$, then $v_j$ appears after $v_i$ in the ordering. If there is no path between $v_i$ and $v_j$, then any order between them is fine. Applications: job scheduling, logistics planning, course selection for each term Topological ordering is not possible if there is a cycle in the graph. A DAG(Directed acyclic graph) has at least one topological ordering. Simple Algorithm Compute the indegree of all vertices from the adjacency information of the graph. Find any vertex with no incoming edges. Print this vertex, and remove it, and its edges. Apply this strategy to the rest of the graph. Imporved Algorithm Keep all the unassigned vertices of indegree 0 in a queue. While queue not empty Remove a vertex in the queue. Decrement the indegree of all adjacent vertices. If the indegree of an adjacent vertex becomes 0, enqueue the vertex. Running time is O(|E|+|V|).]]></content>
      <categories>
        <category>note</category>
        <category>CSC3100</category>
      </categories>
      <tags>
        <tag>CSC3100</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3100 Week8-10]]></title>
    <url>%2F2019%2F10%2F13%2Fnote%2FCSC3100%2FCSC3100-Week8-10%2F</url>
    <content type="text"><![CDATA[TreesDefinitions A tree is a collection of nodes. The collection can be empty . Otherwise, a tree consists of a distinguished node r, called root, and zero or more nonempty (sub) trees $T_1$, $T_2$, …$T_k$, each of whose roots are connected by a direct edge from r. A tree with N nodes has one root, and N-1 edges RootThe top most node of the tree. EdgeNodes other than root in a tree. ParentNode A is the parent of node B if B is the root of the left or right sub-tree of A. ChildNode B is the left (right) child of node A if A is the parent of B. SiblingNode B and node C are siblings if they have the same parent. LeafA node is called a leaf if it has no children PathA path from node $n_1$ to $n_k$: A sequence of nodes $n_1$, $n_2$, …, $n_k$ such that ni is the parent of $n_{i+1}$ for $1 \leq i &lt; k$. Length of a path The length of this path is the number of edges on the path, namely k-1. Notice that in a tree, there is exactly one path from the root to each node. DepthDepth of a node $n_i$ is the length of the unique path from the root to $n_i$. The root is at depth 0. HeightHeight of $n_i$ is the length of the longest path from $n_i$ to a leaf. All leaves are at height 0. Binary TreeA Binary Tree is a tree in which no node can have more than two children (subtrees): $T_L$ and $T_R$, both of which could possibly be empty. Strictly Binary Tree: Every non-leaf node in the tree has nonempty left and right sub-trees Complete (full) binary tree: A complete binary tree of depth d is a strictly binary tree with all leaf nodes at level d. Expression Tree$(a+b\times c) +((d\times e+f)\times g)$ The leaves of an expression tree are operands; The other nodes contain operators. Traversing StrategyPreorder (depth-first) Visit the node Traverse the left subtree in preorder Traverse the right subtree in preorder Inorder Traverse the left subtree in inorder Visit the node Traverse the right subtree in inorder Postorder Traverse the left subtree in postorder Traverse the right subtree in postorder Visit the node Binary Search TreeTree representation: A linked data structure in which each node is an object Node representation: Key field Satellite data Left: pointer to left child Right: pointer to right child p: pointer to parent (p[root[T]] = NIL) PropertyFor every node, T, in the tree: the key values in its left subtree are all smaller than the key value of T. the key values in its right subtree are all larger than the key value of T. OperationsBinary Tree support many dynamic set operations: find, findMin, findMax, predecessor, successor, insert, delete Running TimeOn Average: $\Theta (\log n)$ The expected height of the tree is logn Worst Case: $\Theta (n)$ The tree is a linear chain of n nodes. SearchStarting at the root, trace down a path by comparing k with the key of the current node: If the keys are equal: we have found the key If k &lt; key[x] search in the left subtree of x If k &gt; key[x] search in the right subtree of x Running Time: O(h) Finding the MinimumFollowing left child pointers from the root, until a NIL is encountered Finding the MaximumFollowing right child pointers from the root, until a NIL is encountered SuccessorDefinitionsuccessor(x) = y, such that key[y] is the smallest key &gt; key[x] Case 1right(x) is not empty: successor(x) = the minimum in right(x) Case 2right(x) is empty: go up the tree until the current node is a left child: successor(x) is the parent of the current node if you cannot go further (and you reached the root): x is the largest element PredecessorDefinitionpredecessor(x) = y, such that key[y] is the biggest key &lt; key[x] Case 1left(x) is not empty: predecessor(x) = the maximum in left(x) Case 2left(x) is empty: go up the tree until the current node is a right child: predecessor(x) is the parent of the current node if you cannot go further (and you reached the root): x is the smallest element InsertGoalInsert value v into a binary search tree Method If key[x] &lt; v move to the right child of x, else move to the left child of x When x is NIL, we found the correct position If v &lt; key[y] insert the new node as y’s left child else insert it as y’s right child Beginning at the root, go down the tree and maintain: Pointer x : traces the downward path (current node) Pointer y : parent of x (“trailing pointer”) DeletionGoalDelete a given node z from a binary search tree IdeaCase 1z has no children Delete z by making the parent of z point to NIL Case 2z has one child Delete z by making the parent of z point to z’s child, instead of to z and link the parent with the new child Case 3z has two children Find z’s successor y (the leftmost node in z’s right subtree) y has either no children or one right child (but no left child), why? Delete y from the tree (via Case 1 or 2) Replace z’s key and satellite data with y’s SummaryOperations on Binary Search Trees Operations Time Complexity SEARCH O(h) PREDECESSOR O(h) SUCCESOR O(h) MINIMUM O(h) MAXIMUM O(h) INSERT O(h) DELETE O(h) Note: These operations are fast if the height of the tree is small – otherwise their performance is similar to that of a linked list. IssuesAfter a series of DELETION, the above algorithm favors making the left sub-trees deeper than the right sub-trees. Possible SolutionTry to eliminate the problem by randomly choosing between the smallest element in the right sub-tree and the largest in the left when replacing the deleted element (not rigorous and not prove it yet!!) Proven Solution Red-Black Tree AVL Tree Red-Black Tree Binary search tree with an additional attribute for its nodes: color which can be red or black Restrict the way nodes can be colored on any path from the root to a leaf. Ensures that no path is more than twice as long as any other path. “Balanced” binary search trees guarantee an O(logn) running time. Properties Every node is either red or black The root is black Every leaf (NIL) is black If a node is red, then both its children are black. No two consecutive red nodes on a simple path from the root to a leaf For each node, all paths from that node to descendant leaves contain the same number of black nodes Black HeightHeight of a node: the number of edges in the longest path to a leaf Black-height of a node x: bh(x) is the number of black nodes (including NIL) on the path from x to a leaf, not counting x Height of Red-Black TreeImportant Property of Red-Black TreeA red-black tree with n internal nodes has height at most 2log(n+1) Need to prove two claims first: Claim 1Any node x with height h(x) has $bh(x) \geq \frac{h(x)}{2} $ Proof: By Properties 4, at most $\frac{h}{2}$ red nodes on the path from the node to a leaf. So at least $\frac{h}{2}$ are black. Claim 2The subtree rooted at any node x contains at least $2^{bh(x)} - 1$ internal nodes. (Internal Nodes = All Nodes - Leaves) Ptoof: By induction on h[x] Basis: When h[x] = 0, x is a leaf, so bh(x) = 0 and the number of internal nodes is $0 = 2^0-1$ Inductive Hypothesis: Assume it is true for h[x]=h-1 Inductive Step: Let bh(x) = b, then any child y of x has: bh(y) = b(if the child is red) bh(y) = b - 1(if the child is black) Using inductive hypothesis, the number of internal nodes for each child of x is at least (if it is black): $2^{bh(x) - 1} - 1$ The subtree rooted at x contains at least:$$\begin{align}&amp; (2^{bh(x) - 1} – 1) + (2^{bh(x) - 1} – 1) + 1\= &amp; 2 \times (2^{bh(x) - 1} - 1) + 1\= &amp; 2^{bh(x)} - 1\end{align}$$internal nodes Proof$$n \geq 2^{bh}-1 \geq 2^{\frac{h}{2}}-1$$ Using Claims. Add 1 to both sides and then take logs:$$\begin{align}&amp; n+1 \geq 2^{bh} \geq 2^{\frac{h}{2}}\\Rightarrow &amp; \lg(n+1) \geq \frac{h}{2}\\Rightarrow &amp; h \leq 2 \lg(n+1)\end{align}$$ Operations of Red-Black TreeThe non-modifying operations: MINIMUM, MAXIMUM, and SEARCH still run in O(h) time. They take O(logn) time on red-black trees because Red-Black Tree ensure that the height of the tree will be O(logn) For INSERT and DELETE, we have to guarantee that the modified tree will still be a Red-Black Tree. InsertWhat color to make the new node? RedProperty 4 may be violated: if a node is red, then both its children are black. BlackProperty 5 may be violated: all paths from a node to its leaves contain the same number of black nodes DeleteWhat is the color of the node to be removed? RedAll properties will be fulfilled BlackProperty 2 may be violated: The root is black Property 4 may be violated: If a node is red, then both its children are black Property 5 may be violated: For each node, all paths from the node to descendant leaves contain the same number of black nodes. RotationsOperations for re-structuring the tree after insert and delete operations on red-black trees. Rotations take a red-black-tree and a node within the tree and: Together with some node re-coloring them and help restore the red-black-tree property Change some of the pointer structure Do not change the binary-search tree property Two Types of RotationsLeft RotationsAssumptions for a left rotation on a node x: The right child of x (y) is not NIL. Idea: Pivots around the link from x to y Makes y the new root of the subtree x becomes y’s left child y’s left child becomes x’s right child x’ left child and y’s right child stays the same Right RotationsAssumptions for a right rotation on a node x: The left child of y (x) is not NIL Idea: Pivots around the link from y to x Makes x the new root of the subtree y becomes x’s right child x’s right child becomes y’s left child Insert with RotationGoalInsert a new node z into a red-black-tree Idea Insert node z into the tree as for an ordinary binary search tree Color the node red Restore the red-black-tree properties Use an auxiliary procedure RB-INSERT-FIXUP From the above, we know that Property 4: If a node is red, then both its children are black may be violated. So we need to fix it. INSERT FIXUPCase 1z’s uncle is red p[p[z]] (z’s grandparent) must be black. No matter z is left child or right child: Color p[z] black Color y black Color p[p[z]] red z = p[p[z]] And Repeat until Case 1 would not happen again Push the “red” violation up the tree Case 2z’s uncle is black and z is a right child Idea: z = p[z] LEFT-ROTATE(T, z) now z is a left child, and both z and p[z] are red Then Case 2 is turned into Case 3 Case 3z’s uncle is black and z is a left child Idea: color p[z] to black color p[p[z]] to red RIGHT-ROTATE(T, p[p[z]]) No longer have two reds in a row So the operation is done. Analysis of INSERTInserting the new element into the tree O(logn). For RB-INSERT-FIXUP, the while loop repeats only if Case 1 is executed, the number of times the while loop can be executed is O(logn). So total running time of RB-INSERT is O(logn) Summary Operations on red-black-trees: Operations Time Complexity SEARCH O(h) / O(logn) PREDECESSOR O(h) / O(logn) SUCCESSOR O(h) / O(logn) MINIMUM O(h) / O(logn) MAXIMUM O(h) / O(logn) INSERT O(h) / O(logn) DELETE O(h) / O(logn) Red-black-trees guarantee that the height of the tree will be O(logn) AVL Tree An AVL tree is a binary search tree with a balance condition Invented by Georgy Adelson-Velsky and Evgenii Landis The balance condition: The height of the left and right subtrees can differ by at most 1. In an AVL Tree, height or balancing information is kept for each node All the tree operation can be performed in O(logn) time. Tree Height N(h) = minimum number of nodes in an AVL tree of height h N(h) = N(h-1)+N(h-2)+1 N(0) = 1, N(1) = 2 $N(h) = \phi^h$ ($\phi \approx $1.62) Suppose we have n nodes in an AVL tree of height h: $n \geq N(h) \geq h \leq 1.44\log(n)$ The height of an AVL Tree is at most roughly $1.44\log(n)$ Node HeightBalance Factor: $h_{\text{left}}-h_{\text{right}}$ empty height (height of empty node): -1 Insert When we do an insertion, we need to update all the balancing (or height) information for the nodes on the path back to the root. Inserting a node may violate the AVL tree property. After an insertion, only nodes that are on the path from the insertion point to the root might have their balance altered. As we follow the path up to the root and update the balancing information, we may find a node whose new balance violates the AVL condition. Rebalancing the tree at the first (i.e., deepest) such node can guarantee the entire tree satisfying the AVL property. Let the node that needs rebalancing be $\alpha$. There are 4 cases: Outside Cases: (require single rotation) Insertion into left subtree of left child of $\alpha$ (LL). Insertion into right subtree of right child of $\alpha$ (RR). Inside Cases: (require double rotation) Insertion into right subtree of left child of $\alpha$ (RL). Insertion into left subtree of right child of $\alpha$ (LR). The rebalancing is performed through four seperate rotation algorithms. Note: the height of the tree is h+2 before the insertion Case 1 Do RIght-Rotation and then done! AVL properties has been restored. Note: the height of this tree is still h+2 after the fixup. Case 4 Note: the height of this tree is still h+2 after the fixup. Case 2 and Case 3For these two cases, it’s just mirror operation of Case 1 and Case 4 Red-Black Tree vs. AVL Tree AVL trees maintain a more tight balance than red-black trees. Root height: ~1.44 log(n) vs ~2 log (n) lookup in an AVL tree is typically faster, but this comes at the cost of slower insertion and deletion due to more rotation operations. AVL tree requires O(N) extra space for height whereas Red Black tree requires only 1 bit for color So using an AVL tree if you expect the number of lookups to dominate the number of updates to the tree. Red Black trees are used in most of the language libraries like map, multimap, multiset in C++ whereas AVL trees are used in databases where faster retrievals are required. Large Data Application insert: AVL tree is faster because you need to lookup for a particular node before insertion. AVL tree &amp; RB tree still only need constant number of rotation at the worst case. Thus the bottle neck will become the time you lookup for that particular node. lookup: AVL tree is faster. delete: AVL tree is faster on average, similar to the reason of insertion). B-TreeMotivation for B-TreesData Layout on Disk Track: one ring Sector: one pie-shaped piece. Block: intersection of a track and a sector – minimum unit for disk storage. Disk Block Access Time Seek Time = Time for the disk head to move to the correct track + Time for the beginning of the correct sector to spin round to the head. Transfer Time = Time to read or write the data in blocks. For a 7200 RPM hard disk, one revolution occurs in 1/120 of a second. Seek time is about 8.4 ms and average transfer time for a block is about 12 ms. Random Access Memory (RAM) takes nanoseconds to read from or write to, 100,000 times faster than disk. Motivation Index structures for large datasets cannot be stored in main memory Storing it on disk requires different approach to efficiency. (Can’t afford too many disk access) The disk access needs to be optimized. (One access reads more data) Need an efficient disk based indexing method. Limitation of Binary Tree Assume that we use an AVL tree to store about 20 million records and all indexes are stored on disk. A very deep binary tree with lots of different disk accesses; log2 20,000,000 is about 24, so this takes about 0.3 seconds The logn lower bound on search for a binary tree. How to improve? The solution is to use more branches and thus reduce the height of the tree! As branching increases, depth decreases B-Treese.g. B-tree of order 4: Note: B-Tree do not require that each node always be full. Empty space will permit insertion without rebalancing. Allowing empty space after a deletion can also avoid rebalancing. A B-tree of order m is an m-way tree (i.e., a tree where each node may have up to m children) in which: The number of keys in each non-leaf node is one less than the number of its children and these keys partition the keys in the children in the fashion of a search tree All leaves are on the same level All non-leaf nodes except the root have at least $\lceil\frac{m}{2}\rceil$ children The root is either a leaf node, or it has from two to m children A leaf node contains no more than m–1 keys Note: all nodes except root contain $[\lceil\frac{m}{2}\rceil - 1, m -1]$ elements. Tree-Based Indexing Only the last level of index tree provides the address of data in disk Deletion in disk is easy Insertion may have trouble Solution: Overflow Buckets Constructing a B-Tree Add each number sequentially to a correct leaf node If adding a new number will violate Property 5, add it in and promote the middle one to the higher level. If the higher level also violate Property 5 after that, repeat the procedure until everything is done. Insert Attempt to insert the new key into a leaf If that leaf becoming too big, split the leaf into two, promoting the middle key to the leaf’s parent If the parent becomes too big, split the parent into two, promoting the middle key This strategy might have to be repeated all the way to the top DeleteTwo possible situations in deletion: If the key is already in a leaf node, and removing it doesn’t cause that leaf node to have too few keys, then simply remove it. If the key is not in a leaf then it is guaranteed (by the nature of a B-tree) that its predecessor or successor will be in a child – delete the key and promote the predecessor or successor key to the deleted key’s original position. If (1) or (2) lead to a leaf node containing too few keys, look at the immediately adjacent siblings: If one of them has more than the min. number of keys then we can promote one of its (smallest or biggest) keys to the parent and take the parent key into our lacking leaf. If neither of them has more than the min. number of keys, then the lacking leaf and one of its neighbours can be combined with their shared parent; if this step leave the parent with too few keys then we repeat the process up to the root itself, if required. Case 1Simple leaf deletion Case 2Simple non-leaf deletion Case 3Enough siblings Case 4Too few keys in node and its siblings AnalysisThe maximum number of items in a B-tree of order m and height h: Level Number of Items root $m – 1$ level 1 $m(m – 1)$ level 2 $m^2(m – 1)$ . . . . . . level h $m^h(m – 1)$ So, the total number of items is $(1 + m + m^2 + m^3 + … + m^h)(m-1) = (\frac{m^{h+1}-1}{m-1})(m-1) = m^{h+1}-1$ Reasons for Using B-Trees When searching tables held on disc, the cost of each disc transfer is high but doesn’t depend much on the amount of data transferred, especially if consecutive items are transferred If we use a B-tree of order 101, say, we can transfer each node in one disc read operation A B-tree of order 101 and height 3 can hold $101^4 – 1$ items (approximately 100 million) and any item can be accessed with 3 disc reads (assuming we hold the root in memory) Comparing Trees Binary trees Can become unbalanced and lose their good time complexity (big O) RB trees and AVL trees are strict binary trees that overcome the balance problem Heaps remain balanced but only prioritise (not order) the keys Multi-way trees B-Trees can be m-way, they can have any number of children, useful for database]]></content>
      <categories>
        <category>note</category>
        <category>CSC3100</category>
      </categories>
      <tags>
        <tag>CSC3100</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
        <tag>Trees</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EIE2050 Index]]></title>
    <url>%2F2019%2F09%2F30%2Fnote%2FIndex%2FEIE2050-Index%2F</url>
    <content type="text"></content>
      <categories>
        <category>note</category>
        <category>Index</category>
      </categories>
      <tags>
        <tag>EIE2050</tag>
        <tag>Digital Logic and Systems</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3100 Index]]></title>
    <url>%2F2019%2F09%2F30%2Fnote%2FIndex%2FCSC3100-Index%2F</url>
    <content type="text"><![CDATA[IntroductionThis course is about data structures and algorithms. Core question is: How to solve a problem effectively and efficiently.Data StructuresList List ArrayArray Linked ListLinked List StackStack QueueQueue HeapBinary Heap d-Heap AlgorithmsA problem-solving method suitable for implementation as a computer program. Sorting AlogorithmsThe Sorting ProblemInput a sequence of n numbers, and output a permutation of the input that is ordered from least to most. LinksInsertion Sort Merge Sort Bubble Sort Shell Sort Heap Sort Quick Sort Bucket Sort External Sort Summary Name Time Complexity Usage Insertion Sort $n^2$ a small number of elements Merge Sort $nlogn$ limited memory Bubble Sort $n^2$ Shell Sort $O(N^{\frac{4}{3}})$ to $O(N^{\frac{7}{6}})$ for the best Heap Sort $O(NlogN)$ Quick Sort $O(NlogN)$ Bucket Sort $\Theta (n)$ Radix Sort Searching AlgorithmsThe Searching ProblemAlgorithm Analyze MethodsRunning Time AnalyzeRunning Time Analyze]]></content>
      <categories>
        <category>note</category>
        <category>Index</category>
      </categories>
      <tags>
        <tag>CSC3100</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3001 Index]]></title>
    <url>%2F2019%2F09%2F30%2Fnote%2FIndex%2FCSC3001-Index%2F</url>
    <content type="text"></content>
      <categories>
        <category>note</category>
        <category>Index</category>
      </categories>
      <tags>
        <tag>CSC3001</tag>
        <tag>Discrete Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[6.042J L3]]></title>
    <url>%2F2019%2F09%2F30%2Fnote%2FMIT-6.042J%2F6-042J-L3%2F</url>
    <content type="text"></content>
      <categories>
        <category>note</category>
        <category>MIT-6.042J</category>
      </categories>
      <tags>
        <tag>6.042J</tag>
        <tag>Mathematics for Computer Science</tag>
        <tag>Strong Induction</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3001 Week7]]></title>
    <url>%2F2019%2F09%2F30%2Fnote%2FCSC3001%2FCSC3001-Week7%2F</url>
    <content type="text"><![CDATA[Modular Arithmetic, Chinese Remainder TheoremModular ArithmeticDefinition: $a \ \equiv b \ (\mod n) \ iff \ n|(a - b)$Modular Addition, Multiplication Modular AdditionLemma: If a $\equiv$ c (mod n), and b $\equiv$ d (mod n) then a+b = c+d (mod n) Modular MultiplicationLemma: If a $\equiv$ c (mod n), and b $\equiv$ d (mod n) then ab = cd (mod n) ApplicationsClaim: A number is divisible by 9 if and only if the sum of its digits is divisible by 9. Hint: 10 $\equiv$ 1 (mod 9) Let the decimal representation of n be $d_kd_{k-1}d_{k-2}…d_1d_0$ That means that n = $d_k10^k + d_{k-1}10^{k-1} + … + d_110 + d_0$ So $d_i10^i$ mod 9 $\equiv$ ($d_i$ mod 9)($10^i$ mod 9) $\equiv$ $d_i$ mod 9 Invariant Method Find properties (the invariants) that are satisfied throughout the whole process. Show that the target do not satisfy the properties. Conclude that the target is not achievable. Multiplicative InversesThe Multiplicative Inverse of a $\not\equiv$ 0 (mod n) is another integer a’ such that: $a \times a’ \equiv 1$ (mod n) Note: Not every integer have a multiplicative inverse in modular arithmetic. Claim: If integers k, n are not coprime (i.e. gcd(k, n) $\geq$ 2), then k does not have a multiplicative inverse modulo n. Proof: Suppose k has a multiplicative inverse y ky $\equiv$ 1 (mod n) So ky = 1 + nx for some integer x So ky - nx = 1 If they are not coprime, cannot be stract into 1. CancellationThere is no general cancellation in modular arithmetic. If ac $\equiv$ bc (mod n) and c $\not\equiv$ 0 (mod n), it is not necessarily true that a $\equiv$ b (mod n) When gcd(n, k) $\geq$ 2 and 0 &lt; |a-b| &lt; n, it’s possible that a $\not=$ b and a $\equiv$ b (mod n) is not true. Claim: If ik $\equiv$ jk (mod n) and gcd(k, n) = 1, then i $\equiv$ j (mod n) Fermat’s Little Theorem, Wilson’s TheoremFermat’s Little TheoremIf p is a prime and gcd(k, p) = 1, the we can cancel k. So k (mod p), 2k (mod p), …, (p-1)k (mod p) are all different. This yields that k (mod p), 2k (mod p), …, (p-1)k (mod p) must be a must be a permutation of 1, 2, …, (p-1) (each number appears exactly once.) Theorem: Let p be a prime and gcd(k, p) = 1. Then $k^{p-1} \equiv$ 1 (mod p) Proof: 1·2···(p -1) $\equiv$ (k mod p)· (2k mod p) ··· ((p-1)k mod p) (mod p)$\equiv$ (k· 2k ··· (p -1)k) (mod p)$\equiv$ ($k^{p-1}$)·1·2 ··· (p -1) (mod p) Since 1, 2, …, (p -1) are coprime with are coprime with p, they can be cancelled on both side, we have: $1 \equiv k^{p-1} (\mod p)$ Wilson’s TheoremTheorem: p is a prime if and only if $(p-1)! \equiv -1(\mod p)$ Proof: We first consider the converse.W.l.o.g, suppose p is not a prime and p $\geq$ 6.Then p = qr for some 2 $\leq$ q, r &lt; p .If q $\not=$ r, then both q and r appear in (p -1)! and so (p -1)! $\equiv$ 0 (mod p).If q = r, then p = $q^2$&gt; 2q (since p $\geq$ 6). Then both q and 2q are in (p -1)! and so again (p -1)! $\equiv$ 0 (mod p). To prove the forward direction, we will need a lemma. Lemma: Let p be a prime number. Then $x^2 \equiv 1 (\mod p)$ if and only if $x \equiv 1 (\mod p)$ or $x \equiv -1(\mod p)$ Proof: $x^2 \equiv 1(\mod p)$ p | $x^2$ - 1 = (x-1)(x+1) p | (x-1) or p | (x+1) $x \equiv 1 (\mod p)$ or $x \equiv -1 (\mod p)$ Complete proof can be found on ppt Chinese Remainder TheoremHow to solve the following equation?$$ax \equiv b (\mod n)$$Case 1: gcd(a, n) = 1 We can multiply a’ on both sides of the equation to obtain: $x \equiv a’b (\mod n)$ Case 2: gcd(a, n) = c &gt; 1 Case 2a: Case 2b:]]></content>
      <categories>
        <category>note</category>
        <category>CSC3001</category>
      </categories>
      <tags>
        <tag>CSC3001</tag>
        <tag>Discrete Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3100 Week7]]></title>
    <url>%2F2019%2F09%2F30%2Fnote%2FCSC3100%2FCSC3100-Week7%2F</url>
    <content type="text"><![CDATA[HashingThe Search ProblemFind items with keys matching a given search key Given an array A, containing n keys, and a search key x, find the index i such as x=A[i] As in the case of sorting, a key could be part of a large record. Applications Keeping track of customer account information at a bank Keep track of reservations on flights Search engine Applications need a lot of queries (once inserted, delete operations are not very often) Direct AddressingAssumptions: Key values are distinct Each key is drawn from a universe U = {0, 1, . . . , m-1} Idea: Store the items in an array, indexed by keys Direct-address table representation: An array T[0 . . . m - 1] Each corresponds to a key in U T[k] stores a pointer to x (or x itself) with key k T[k] may be empty Notations: U - universe of keysK - actual keys Compare with Other Solutions Solution Insert Search direct addressing O(1) O(1) ordered array O(N) O(logN) ordered linked list O(N) O(N) unordered array O(1) O(N) unordered linked list O(1) O(N) Hash TableWhen K is much smaller than U, a hash table requires much less space than a direct-address table. Can reduce storage requirements to |K| Can still get O(1) search time, but on the average case, not the worst case Consist of A fixed size array A hashing function The key of each element is mapped (hashing) into some number in the range 0 to TableSize - 1, and placed in the appropriate cells. Hash FunctionThe mapping function is called a hash function, which ideally: Should be simple to compute; Should ensure that any two distinct keys get different cells; Or should distribute the keys evenly among the cells. Remaining Problem Choose a hash function; Decide on the table size; Decide what to do when two keys hash to the same value (this is known as a collision). Simple Hash FunctionFor numeric keys, one simple hash function is Key mod TableSize, where TableSize is a prime number. Load Factor: Ratio of the number of elements in the hash table to the table size. Often control as 0.5 Solution of Hashing CollisionSeparate ChainingKeep a list of all elements that hash to the same value. Chaining could be through a list or a tree. A disadvantage of separate chaining is that it requires a second data structure for the chains. Time is required for the allocation of new cells on insertion. Insert Find the hash index for the given key hash_index = key % size of table Insert a node into a linked list depending on the hash index Example, Insert 33 to the hash table with 10 linked list Hash_index = 33 % 10 = 3 The hash table’s 4th linked list will be used to store 33 AnalysisWorst Case: all elements hash into the same slot, the search is $\Theta n$ Average Case: depends on how well the hash function distributes the n keys among the m slots If Simple uniform hashing assumption (Any given element is equally likely to hash into any of the m slots) is true, the search is $\Theta (\frac{n}{m})$ Load FactorLoad factor of a hash table T:$\alpha = \frac{n}{m}$n = # of elements stored in the tablem = # of slots in the table = # of linked lists $\alpha$ encodes the average number of elements stored in a chain$\alpha$ can be &lt;, =, &gt; 1 Successful Search and Unsuccessful SearchUnsuccessful SearchAn unsuccessful search in a hash table takes expected time $\Theta (1+\alpha)$ under the assumption of simple uniform hashing (i.e. item not in the table) Successful SearchTakes $\Theta (1+\frac{a}{2})$ (search half of a list length plus $O(1)$ to compute hash) Average TimeIf m (# of slots) is proportional to n (# of elements in the table): $n = O(m)$ $\alpha = \frac{n}{m} = \frac{O(m)}{m} = O(1)$ So searching takes constant time on average Open Addressing If we have enough contiguous memory to store all the keys (m &gt; N), we can store the keys in the table itself No need to use linked lists anymore Basic idea: Insertion: if a slot is full, try another one, until you find an empty one Search: follow the same sequence of probes Deletion: more difficult … (we’ll see why) Search time depends on the length of the probe sequence. Hash FunctionA hash function contains two arguments now: Key Value and Probe Number. h(k,p), p=0,1,…,m-1 Probe Sequences&lt;h(k,0), h(k,1), …, h(k,m-1)&gt; Must be a permutation of &lt;0,1,…,m-1&gt; There are m! possible permutations Collision Resolution Strategies Linear Probing Quadratic Probing Double Hashing Linear ProbingInsertIdea: when there is a collision, check the next available position in the table (i.e., probing) FindThree Cases: Position in table is occupied with an element of equal key Position in table is empty Position in table occupied with a different element For case 3: Probe the next higher index until the element is found or an empty position is found. The process wraps around to the beginning of the table. Infinity Loop: Remember to check that whether the probe index equals to the original index to avoid infinity loop. DeleteProblem: We cannot mark the slot as empty, because it’s impossible to retrieve keys inserted before that deleted slot but index larger than that slot. Solution: Mark the slot with a sentinel value DELETED. So the deleted slot can later be used for insertion. Searching will be able to find all the keys. Prmary Clustering ProblemLinear probing always adds 1 in the previous hash index. So Long chunks of occupied slots are created $\Rightarrow$ Collisions happens more often $\Rightarrow$ search time increases a lot. Quadratic Probinghash function: h(x) = x % size of table(still the same) index = h(x) + C2, where C = number of collisions $h(x) + C^2 \rightarrow h(x + C^2)$ Make the index number in the correct range $0 \leq C \leq size\ of\ table$ Initially, C = 0 For insertion, if collision occurs, C = C + 1 InsertStart with C = 0. Do the hash function to compute the index. When collision occurs, C = C + 1 and compute index again. FindStart with C = 0. If the number does not fit, C = C + 1 and compute index again. DeleteMark the slot with a sentinel value DELETED.(The same as linear probing) Double HashingHave two hash functions. Hash Function 1: $h_1(x) = x % size\ of\ table$ Hash Function 2: $h_2(x) = p – (x % p)$, where p is a prime number smaller than size of table $index = h_1(x) + C \times h_2(x)$, where C is number of collisions $h_1(x) + C \times h_2(x) \rightarrow h_1(h_1(x) + C\times h_2(x))$ Make the index number in the correct range $0 \leq C \leq size\ of\ table$ If collision occurs, C = C + 1 InsertStart with C = 0. Do the hash function to compute the index. When collision occurs, C = C + 1 and compute index again. FindStart with C = 0. If the number does not fit, C = C + 1 and compute index again. DeleteMark the slot with a sentinel value DELETED.(The same as linear probing) String to a Numbere.g. Add up the ASCII values of the characters in the string An example of hash function for strings Analysis of Open AddressingUnsuccessful Retrieval$E(\#steps) = \sum^m_{k=1}(1-a) \leq \sum^\infty_{k=0}ka^{k-1}(1-a) = (1-a)\frac{1}{(1-a)^2} = \frac{1}{1-a}$ Successful Retrieval$E(\#steps) = \frac{1}{a}ln(\frac{1}{1-a})$]]></content>
      <categories>
        <category>note</category>
        <category>CSC3100</category>
      </categories>
      <tags>
        <tag>CSC3100</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3001 Week6]]></title>
    <url>%2F2019%2F09%2F30%2Fnote%2FCSC3001%2FCSC3001-Week6%2F</url>
    <content type="text"><![CDATA[greatest common divisorsCommon Divisorsc is a common divisor of a and b means c|a and c|b gcd(a, b) ::= the greatest common divisor of a and b.Claim: If p is prime, and p does not divide a, then gcd(p, a) = 1. The Quotient-Remainder TheoremFor b &gt; 0 and any a, there are unique integers q ::= quotient(a, b), r ::= remainder(a, b), such that a = qb + r and 0 $\leq$ r &lt; b. We also say q = a div b and r = a mod b Greatest Common DivisorsGiven a and b, how to compute gcd(a, b)? Let’s say a $\geq$ b If a = kb, the gcd(a, b) = b, and we are done Otherwise, by the Division Theorem, a = qb + r where r &gt; 0 Euclid’s GCD Algorithmgcd(a, b) = gcd(b, r) gcd(a, b) if b = 0, the answer = a. else: write a = qb + r answer = gcd(b, r) Proof of Euclid’s GCD AlgorithmWhen r = 0, clearly correct When r &gt; 0: Let d be a common divisor of b, r b = $k_1$d and r = $k_2$d for some $k_1$, $k_2$ a = qb + r = q$k_1$d + q$k_2$d = (q$k_1$ + $k_2$)d You can also prove this from another direction. Linear Combination vs. Common DivisorGreatest Common Divisor: Theorem: gcd(a, b) = spc(a, b)]]></content>
      <categories>
        <category>note</category>
        <category>CSC3001</category>
      </categories>
      <tags>
        <tag>CSC3001</tag>
        <tag>Discrete Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3001 Week5]]></title>
    <url>%2F2019%2F09%2F30%2Fnote%2FCSC3001%2FCSC3001-Week5%2F</url>
    <content type="text"><![CDATA[Recursion is one of the most important techniques in computer science. The main idea is to capture the invariants over repeated actions.Setting up Recurrences We can difine a sequence by specifying relation between the current term and the previous terms. Fibonacci RecurrenceRebbit Populations A mature boy/girl rabbit pair reproduces every month. Rebbits mature after one month $w_n$::= # newborn pairs in the n-th month $r_n$::= # pairs in the n-th month Start with a newborn pair: $w_0 = 1$, $r_0 = 0$ How many rabbits after n months? closed form: A formula so that # steps for calculating $r_n \leq$ constant Number of Bit Strings Without a Specific PatternHow many n-bit strings without the bit pattern 11? Case 1: The first bit is 0. Then any (n -1)-bit string without the pattern 11 can be appended to the end form an an n-bit string without 11. So in this case there are exactly $r_{n-1}$ such n-bit strings. Case 2: The first bit is 1. Then the second bit must be 0. Then any (n-2)-bit string without the bit pattern 11 can be apppended to the end to form an n-bit string without 11. So in this case there are exactly $r_{n-2}$ such n-bit strings. Problem Solving RecurrencesTower of Hanoi The goal is to move all the disks to post 3. The rule is that a bigger disk cannot be placed on top of a smaller disk. Think recursively Merge SortSee CSC3100. Catalan RecurrencesParenthesisHow many valid ways to add n pairs of parenthesis? Let $r_n$ be the number of ways to add n pairs of parenthesis. Case 1: ()—————— So there are $r_{n-1}$ in this case Case 2: (–)—————- So there are $r_{n-2}$ in this case Case 3: (—-)————– So there are $2r_{n-3}$ in this case …… Case k: (———–)——- So there are $r_{k-1}r_{r-k}$ ways in case k Therefore, by the sum rule, $r_n = \sum^n_{k=1}r_{k-1}r_{n-k}$ StairsAn n-stair is the collection of unit squares bounded by x-axis, y=x and x=n+1.For example 1-stair, 2-stair, and 3-stair are like this: Given the n-stair, the first observation is that positions on the diagonal (red numbers) must be covered by different recangles. Since there are n positions in the diagonal and we can only use n rectangles, each rectangle must cover exactly one red number. Consider the rectangle R that covers the bottom right corner (marked with o). We consider different cases depending on which red number is covered by R. Then go with recursion. Proof can be found in ppt. The total number of ways is equal to $r_n = \sum^n_{i=1}r_{i-1}r_{n-i}$ Catalan NumberThe recursion for the stair problem is the same as the recursion for the parentheses problem. It can be showed that $r_n = \frac{1}{n+1} \binom{2n}{n}$ This is well known as the n-th Catalan number. Solving RecurrencesTwo ways: Guess + Mathematical Induction Direct Compute Solving Fibonacci SequenceGenerating Functions&lt;$a_0$, $a_1$, $a_2$, $a_3$, …&gt; $\leftrightarrow$ F(x) This is called the ordinary generating function for {$a_n$} F(x) = $a_0$ + $a_1x$ + $a_2x^2$ + $a_3x^3$ + … Right Shifting: &lt;0, 0, 0, 0, …, $a_0$, $a_1$, $a_2$, $a_3$, …&gt; $\leftrightarrow$ $x^k$F(x) Differentiation: &lt;$f_0$, $f_1$, $f_2$, $f_3$, …&gt; $\leftrightarrow$ F(x) $\rightarrow$ &lt;$f_1$, $2f_2$, $3f_3$, …&gt; $\leftrightarrow$ F’(x) SolvingThe generating function for {$f_n$} is F(X) = $f_0$ + $f_1x$ + $f_2x^2$ + $f_3x^3$ + … = 0 + x + ($f_1$ + $f_0$)$x^2$ + ($f_2$ + $f_1$)$x^3$ + … So F(x) = x + xF(x) + $x^2$F(x) So we can get F(x) = $\frac{x}{1-x-x^2}$ Then we can do Partial Fractioning and Taylor Series Expand. Second Order Recurrence Relation$$a_k = Aa_{k-1} + Ba_{k-2}$$ This is called “second-order linear homogeneous recurrence relation with constant coefficients”. Fibonacci sequence is when A=B=1. Distinct-Roots TheoremSuppose a sequence ($a_0$, $a_1$, $a_2$, $a_3$, …) satisfies a recurrence relation $a_k = Aa_{k-1} + Ba_{k-2}$. If $t^2-At-B = 0$ has two distinct roots r and s, then $a_n = Cr^n + Ds^n$ for some C and D.]]></content>
      <categories>
        <category>note</category>
        <category>CSC3001</category>
      </categories>
      <tags>
        <tag>CSC3001</tag>
        <tag>Discrete Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EIE2050 Week6]]></title>
    <url>%2F2019%2F09%2F30%2Fnote%2FEIE2050%2FEIE2050-Week6%2F</url>
    <content type="text"><![CDATA[Half AdderFull AdderParallel AdderComparitorDecoderEncoder]]></content>
      <categories>
        <category>note</category>
        <category>EIE2050</category>
      </categories>
      <tags>
        <tag>EIE2050</tag>
        <tag>Digital Logic and System</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EIE2050 Week5]]></title>
    <url>%2F2019%2F09%2F30%2Fnote%2FEIE2050%2FEIE2050-Week5%2F</url>
    <content type="text"><![CDATA[Combinational Logic CircuitsIn Sum-of-Products (SOP) form, basic combinational circuits can be directly implemented with AND-OR combinations if the necessary complement terms are available. SOP Circuits SOP expression is an AND-OR combination of the input variables and the appropriate complements. AOI Circuits When the output of a SOP form is inverted, the circuit is called an AND-OR-Invert circuit. The output expression can be changed to a POS expression by applying DeMorgan’s Theorem twice. Exclusive-or LogicThe Boolean expression is $X = \overline{A}B + A\overline{B}$ Exclusive-NOR LogicThe Boolean expression is $X = \bar{A}\bar{B} + AB$ NAND LogicNOR Logic]]></content>
      <categories>
        <category>note</category>
        <category>EIE2050</category>
      </categories>
      <tags>
        <tag>EIE2050</tag>
        <tag>Digital Logic and Systems</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3100 Week6]]></title>
    <url>%2F2019%2F09%2F26%2Fnote%2FCSC3100%2FCSC3100-Week6%2F</url>
    <content type="text"><![CDATA[Bubble Sort Repeatedly pass through the array Swaps adjacent elements that are out of order Advantage: easier to implementBubble Sort vs. Insertion Sort In average case, Insertion Sort is about $\frac{n^2}{4}$ and Bubble Sort is about $\frac{n^2}{2}$. So Bubble Sort is not very useful in practices. Inversion in Analize Insertion SortInversion: An inversion in an array of numbers is any ordered pair (i, j) having the property that i &lt; j but A [i] &gt; A [j]. Theorem: On average, there are $\frac{N(N-1)}{4}$ inversions in an array of N distinct elements. Proof: Let L be a list for any given N distinct elements. Let Lr be the reverse of L Let (x,y) be any pair among N distinct elements. Then either L or Lr contains an inversion of (x,y). The total number of inversions of L and Lr is $\frac{N(N-1)}{2}$ The average of L is $\frac{N(N-1)}{4} Conclusion: Each swap between 2 adjacent elements removes exactly one inversion. On average, an algorithm that sorts by exchanging adjacent elements requires about N(N-1)/4 time complexity. A sorting algorithm that is subquadratic must do comparisons and exchanges between elements that are far apart. Shell Sort Break the quadratic time barrier by comparing elements that are distant. The distance between comparisons decreases as the algorithm runs until the last phase, in which adjacent elements are compared (diminishing increment sort). An increment sequence $h_1$, $h_2$, $h_3$, …, $h_t$, used in reverse order with $h_1=1$. Many rounds of Insertion Sort Such jumping may imporve Bubble Sort’s performance, too. Such technique can be used to combine other sorts. Analysis of Shell SortTheorem: The worst-case running time of Shellsort, using some increment, is $\Theta(N^2)$. Good Sequence for Shell SortHibbard’s increment: 1, 3, 7, .., $2^{k-1}$ Worst-case running time: $\Theta (N^{\frac{3}{2}})$ Average-case running time: $O (N^{\frac{5}{4}})$ Sedgewick’s increment: 1, 5, 19, 41, 109, … (each term is either $9\times 4^i-9\times 2^i+1$ or $4^i-3\times 2^i+1$) Worst-case running time: $O (N^{\frac{4}{3}})$ Average-case running time: $O (N^{\frac{7}{6}})$ Heap Sort First build a binary (max) heap of N elements. Which means the maximum number is at root Then perform N-1 DeleteMax operations by swapping the last element in the heap with the first, decrementing the heap size, and percolating down. Sorting in O(NlogN) time, but in practice, is slower than Shellsort that uses Sedgewick’s increment sequence. Merge SortMerge Sort is very good for sorting huge data. Although the disk can be very big, the memory of a computer is limited(Means data you can manipulate in a time is limited). So it’s good for External Sort. Quick SortComparison based sorting method Very fast known sorting algorithm in practice Average running time is $O(NlogN)$ Worst case performance is $O(N^2)$ (but very unlikely) Algorithm If the number of elements in S is 0 or 1, then return. Pick any element v in S. This is called the pivot. Partition S -{v} (the remaining elements in S) into 2 disjoint groups: $S1 = {x \in S-{v}|x \leq v}$ $S2 = {x \in S-{v}|x \geq v}$ Return {quicksort ($S_1$) followed by v followed by quicksort ($S_2$)}. An ImprovementAs we all know, quick sort’s performance will be worse if the pivot is too big or too small, so we can take the first, final and middle element and choose the middle one to be the pivot every time. Limitation Quick Sort does not perform well for small arrays: CUTOFF is about 10. We often use Insertion Sort for such arrays. For every sorting algorithm that is comparison based, it must take $\Omega (nlogn)$ in worst case. Bucket SortAssumption: the input is generated by a random process that distributes elements uniformly over [0, 1) Idea: Divide [0, 1) into n equal-sized buckets Distribute the n input values into the buckets Sort each bucket (e.g., using quicksort) Go through the buckets in order, listing elements in each one Running TimeAssume that elements are distributed uniformly, running time is $\Theta (n)$ Radix SortStable SortExternal Sort For the input on some sequential-access media like tapes and it is too large to be all incorporated into the memory. Computing time becomes insignificant when compared with access time. Merge routine from Merge Sort is used.]]></content>
      <categories>
        <category>note</category>
        <category>CSC3100</category>
      </categories>
      <tags>
        <tag>CSC3100</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3100 Week5]]></title>
    <url>%2F2019%2F09%2F26%2Fnote%2FCSC3100%2FCSC3100-Week5%2F</url>
    <content type="text"><![CDATA[Priority Queue and HeapMotivationFor a simple FIFO Queue, sometimes the queue will be jammed by a huge job while waiting for just one printout.There’s three important point: Short job may go first Most urgent cases should go first Tasks with highest priority should go first Priority Queue ADT(Abstract Data Type)In Priority Queue, every element comes along with a priority number. Priority Queue Operations insert, deletemin, create, isempty Priority Queue PropertyFor two elements in the queue, x and y, if x has a lower priority value than y, x will be deleted before y. Priority Queue ImplementationSimple Linked List Insert at the front in O(1) Delete minimum in O(N) Sorted Linked List Insert in O(N) Delete minimum in O(1) Sorted Array Insert in O(N) Delete minimum in O(N) Binary Heap Insert in O(logN) Delete minimum in O(N) Property of Binary Heap Struture Property Heap Order Property Binary Search Tree(To be explained later) Insert in O(logN) Delete minimum in O(logN) Binary HeapStructured Property A heap is a binary tree that is completely filled except at the bottom level, which is filled from the left to right A complete binary tree of height h has between $2^h$ and $2^h -1$ nodes The height of a complete binary tree = $\lfloor$ $log N \rfloor$ (round down, e.g. $\lfloor 2.7 \rfloor$ = 2). The height of a tree which have only one node is 0. A complete binary tree can be represented in an array without using pointers. (How to implement the array back to heap has an order) For a node at i in the array, it’s children is 2i and 2i+1, it’s parent is at $\lfloor \frac{i}{2} \rfloor$ Ordered PropertyThe value at any node should be smaller than(or equal to) any of its decendents. So the node with minimum value is at the root. Functions Insert DeleteMin DecreaseKey buildHeap insert Create a hole Percolate the hole up Percolate up: If the velue you want to insert is smaller than the hole’s parent, switch the hole with its parent. deleteMinThe element at the root is the minimum and is to removed. Remove it and a hole is created, fill the hole with the last node X, and percolate it down. Percolate down: If the value in the hole is bigger than its decendents, switch the hole with its smaller decendent. Attention: Some node may have only one child, so be careful when coding. decreaseKeyDefinitiondecreaseKey(P, $\Delta$) Lower the key value at position P by $\Delta$ Fix the heap order by percolating up ApplicationAdvance the priority of a paticular job. buildHeapN successive appends at the end of the array, each takes O(1). The tree is unordered. Then percolate down until it’s ordered. Complexity AnalizeAt most $\frac{n}{4}$ percolate down 1 levelAt most $\frac{n}{8}$ percolate down 2 level… $1\frac{n}{4}+2\frac{n}{8}+3\frac{n}{16}+… = \sum_{i=1}^{logn}i\frac{n}{2^{i+1}} = n$ d-heapDefinitiond-heap is exactly like a binary heap except that all nodes have d children (A binary heap is also called 2-heap) Remark Insert operation: $O(log_dN)$; DeleteMin operation: $O(dlog_dN)$; Useful in some applications where #INSERT &gt;= #DeleteMin In practice, 4-heap outperforms 2-heap. Load BalancingAssign jobs to servers basing on the loading of the servers Use heap to assign servers.]]></content>
      <categories>
        <category>note</category>
        <category>CSC3100</category>
      </categories>
      <tags>
        <tag>CSC3100</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EIE2050 Week4]]></title>
    <url>%2F2019%2F09%2F23%2Fnote%2FEIE2050%2FEIE2050-Week4%2F</url>
    <content type="text"><![CDATA[Boolean AlgebraIn Boolean Algrbra, a variable is a symbol used to represent an action, a condition, or data. A single variable can only have a value of 1 or 0. Compplement: The complementrepresents the inverse of a variable and is indicated with an overbar. Thus, the complement of $A$ is $\overline{A}$.Literal: A literalis a variable or its complement. Boolean AdditionIn Boolean Algebre, addition is equivalent to the OR operation. We called it “OR”, we never called it addition. Boolean MultiplicationIn Boolean algebra, multiplication is equivalent to the AND operation. The product of literals forms a product term. The product term will be 1 only if all of the literals are 1. We called it “AND”, we never called it multiply. Operation RulesCommunicative Law$$A+B = B+A$$$$AB = BA$$ Associative Law$$A + (B + C) = (A + B) + C$$$$A(BC) = (AB)C$$ Distributive Law$$AB + AC = A(B+C)$$ Rules of Boolean Algebra A + 0 = A A + 1 = 1 A · 0 = 0 A · 1 = A A + A = A A + $\overline{A}$ = 1 A · A = A A · $\overline{A}$ = 0 $\overline{\overline{A}} = A$ A + AB = A A + $\overline{A}$B = A + B (A + B)(A + C) = A + BC Boolean Analysis of Logic CircuitsWriting the expression for each gate and combining the expressions according to the rules for Boolean Algebra. SOP And POS FormsBoolean expressions can be written in the sum-of-productsform (SOP) or in the product-of-sumsform (POS). In both forms, an overbar (not) cannot extend over more than one variable. SOP Standard FormEvery variable in the domain must appear in each term. This form is useful for constructing truth tables or for implementing logic in PLDs. POS Standard FormEvery variable in the domain must appear in each sum term of the expression. Karnaugh Maps(卡诺图)The Karnaugh Map is also called K-map. It is a tool for simplifying combinational logic with 3 or 4 variables. For 3 variables, 8 cells are required($2^3$). The map shown is for three variables labeled A, B, and C. Each cell represents one possible product term.Each cell differs from an adjacent cell by only one variable.]]></content>
      <categories>
        <category>note</category>
        <category>EIE2050</category>
      </categories>
      <tags>
        <tag>EIE2050</tag>
        <tag>Digital Logic and Systems</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[6.042J L2]]></title>
    <url>%2F2019%2F09%2F20%2Fnote%2FMIT-6.042J%2F6-042J-L2%2F</url>
    <content type="text"><![CDATA[Proof by ContradictionTo prove proposition P is true, we assume P is false. Then use that hypothesis to derive a falsehood or contradiction.InductionInduction Axiom Let P(n) be a predicate. If P(0) is true, and $\forall n \in N$ $(P(n) \Rightarrow P(n+1))$ is true, then $\forall n \in N$, P(n) is true. Base Case(Basis Step)The case where the induction started. Inductive StepTo show that from the Base Case on, every implication to the next is true. Induction PropertyInduction may or may not give the reason why it’s correct. In most cases it won’t, it will just simply tells you the correctness of the answer.]]></content>
      <categories>
        <category>note</category>
        <category>MIT-6.042J</category>
      </categories>
      <tags>
        <tag>6.042J</tag>
        <tag>Mathematics for Computer Science</tag>
        <tag>Induction</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3100 Week4]]></title>
    <url>%2F2019%2F09%2F20%2Fnote%2FCSC3100%2FCSC3100-Week4%2F</url>
    <content type="text"><![CDATA[Elementary Data StructuresListSome popular operations on List: printList, makeEmpty, find, insert, Delete, next, previous.Array PrintList and Find implemented in O(N) Requires to estimate of the maximum size for memory allocation Insertion and Deletion are expensive Linked-List Consist of a series of nodes(consist of data and reference) Not necessarily adjacent in memory Flexible on Insertion and Deletion Search in Linked List is nightmare Stack LIFO(Last In First Out) structure Access From Top Basic Operations: makeEmpty, pop, push, top, isEmpty Queue FIFO(First In First Out) structure Delete At The Front, Delete At The Rear Basic Operations: enqueue, dequeue Application of QueuesPrint jobs, computer networks, real-life waiting lines.]]></content>
      <categories>
        <category>note</category>
        <category>CSC3100</category>
      </categories>
      <tags>
        <tag>CSC3100</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3100 Week3]]></title>
    <url>%2F2019%2F09%2F20%2Fnote%2FCSC3100%2FCSC3100-Week3%2F</url>
    <content type="text"><![CDATA[Asymptotic notation of function growthThree Key Definitions $T(N) = O(g(N)) \ if \ \exists c, n_0 \in R^+ \ s.t. \ T(N) \leq cg(N) \ when \ N \geq n_0$ $T(N) = \Omega (g(N)) \ if \ \exists c, n_0 \in R^+ \ s.t. \ T(N) \geq cg(N) \ when \ N \geq n_0$ $T(N) = \Theta (g(N)) \ if \ T(N) = O(g(N)) \ and \ T(N) = \Omega (g(N))$ The increasing speed of O and $\Omega$ usually are the same.Usually we just use Big Oh to represent $\Theta$ Big Oh NotationO(g(n)) = {T(n): there exist positive constants c and $n_0$ such that 0 $\leq$ T(n) $\leq$ cg(n) for all n $\geq$ $n_0$} g(n) is an asymptotic upper bound for T(n). If T(n) $\in$ O(g(n)), we write T(n)=O(g(n)) Relationship$O(1) &lt; O(\log n) &lt; O(n) &lt; O(n\log n) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)$ $\Omega$ Notation$\Omega$ (g(n)) = {T(n): there exist positive constants c and $n_0$ such that 0 $\leq$ cg(n) $\leq$ T(n) for all n $\geq$ $n_0$}. g(n) is an asymptotic lower bound for T(n). If T(n) $\in$ $\Omega$(g(n)), we write T(n)=$\Omega$(g(n)) $\Theta$ Notation$\Theta$(g(n))={f(n): there exist positive constants $c_1$, $c_2$ and $n_0$ such 0 $\leq$ $c_1$g(n) $\leq$ T(n) $\leq$ $c_2$ g(n) for all n $\geq$ $n_0$}. g(n) is an asymptotic tight bound for T(n) if and only if T(n)=O(g(n)) and T(n)=$\Omega$(g(n)). Relational PropertiesTransitivity: T(N) = $\Omega$(g(n)) and g(n) = $\Theta$(h(n)) $\Rightarrow$ T(N) = $\Theta$(h(n)). Same for O and $\Omega$Reflexivity: T(N) = $\Theta$(T(N)). Same for O and $\Omega$Symmetry: T(N) = $\Theta$(g(n)) if and only if g(n) = $\Theta$(T(N))Transpose Symmetry: T(N) = O(g(n)) if and only if g(n) = $\Omega$(T(N)) Typical Growth Rate Function Name c Constant logN Logarithmic $log^2$N Log-Squared N Linear NlogN $N^2$ Quadratic $N^3$ Cubic $2^N$ Exponential Growth Rate ComputationRule 1If $T_1(N) = O(f(N))$ and $T_2(N) = O(g(N))$, then:(a) $T_1(N)+T_2(N) = max(O(f(N))), O(g(N)))$(b) $T_1(N)*T_2(N) = O(f(N)*g(N))$ Rule 2If T(N) is a polynomial of degree k, then T(N) = $\Theta$($N^k$) Rule 3 $log^kN = O(N)$ for any constant k. This tells that logarithms grow very slowly. Addition$log^{k}n = O(n)$ implies $log^{k}n = O(2^{logn})$ implies $n^k = O(2^n)$ Analyzing Algorithms Using NotationsRule 1: For Loops is O(N) Rule 2: Nested For Loop is $O(N^n)$, n is the number of nested layers Rule 3: Consecutive Statements, choose the growing fastest one. Rule 4: Conditional Statement: 1234if (condition) S1else S2 The larger running time of S1 and S2 Maximum Subarray ProblemThe task of finding a contiguous subarray with the largest sum. A Divide and Conquer SolutionIf we pick the middle point of the array, there are three situations of the subarray: left, right and cross the mid point. Solve the left, right case recursively, then compare them with the third case, choose the largest. Analyze Running TimeFor base case, $T(1) = \Theta (1)$For subarrays, $2T(\frac{n}{2})$For mid point situation, $\Theta (n)$ So the running time $T(n) = 2T(\frac{n}{2})+ \Theta n$ Same as Merge Sort $\Theta (nlogn)$ RecurrenceA recurrence is a function defined in terms of: One base Itself with smaller arguments Method to Compute the Recurrence Guess the solution Use induction to prove Called substitution method Recursion TreesSumming accross each level in te recursion tree. Master MethodUsed for many divide-and-conquer recurrences of the form: $T(n) = aT(\frac{n}{b}) + f(n)$ where $a \geq 1$, $b &gt; 1$ and $f(n) &gt; 0$]]></content>
      <categories>
        <category>note</category>
        <category>CSC3100</category>
      </categories>
      <tags>
        <tag>CSC3100</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3001 Week4]]></title>
    <url>%2F2019%2F09%2F19%2Fnote%2FCSC3001%2FCSC3001-Week4%2F</url>
    <content type="text"><![CDATA[The Idea of Mathematical InductionObjective: Prove $\forall n \geq 0 \ P(n)$Universal Generalization: To prove a for-all statement is to prove that R(c) is true for any c, but this is often difficult to prove directly. Mathematical Induction provides another way to prove a for-all statement. It allows us to prove the statement step-by-step. e.g. : Odd Powers are OddFact: If m is odd and n odd, then nm odd. Proposition: for an odd number m, $m^i$ is odd for all non-negative integer i.$$\forall i \in Z \ odd(m^i)$$Let P(i) be the proposition that $m^i$ is odd$$\forall i \in Z \ P(i)$$Idea of Induction: P(1) is true by definition. P(2) is true by P(1) and the fact P(3) is true by P(2) and the fact P(i+1) is true by P(i) and the fact So P(i) is true for all i The Induction RuleInduction Rule is an axiom.$$\frac{P(0),\ \forall n \in Z\ P(n)\rightarrow P(n+1)}{\forall m \in Z\ P(m)}$$ Basic Induction ProofsProving an Equality$$\forall n \geq 1 \ 1^3+2^3+…+n^3=(\frac{n(n+1)}{2})^2$$ Let P(n) be the induction hypothesis that the statement is true for n. Base Case: P(1) is true Induction Step: Assume P(n) is true, prove P(n+1) is true. Property$\forall n \geq 1, \ 2^{2n} - 1$ is divisible by 3 Base Case: $2^{2n} - 1 = 2^2 - 1 = 3$ Induction Step: Assume P(i) for some $i \geq 1$ and prove P(i+1) Inequality$$\forall n \geq 2, \ \frac{1}{\sqrt{1}}+\frac{1}{\sqrt{2}}+…+\frac{1}{\sqrt{n}} &gt; \sqrt{n}$$ Base Case: (n=2) is true. Induction Step: Assume P(i) for some $i \geq 2$ and prove P(i+1) Cauchy-Schwarz InequalityFor any $a_1$,…, $a_n$, and any $b_1$, …, $b_n$, $a_1b_1+a_2b_2+…+a_nb_n \leq \sqrt{a_1^2+a_2^2+…+a_n^2}\sqrt{b_1^2+b_2^2+…+b_n^2}$ Base Case: When n = 1, LHS $\geq$ RHS Induction Step: Assume true for all $\leq$ n, prove n+1 So is to prove: $a_1b_1+a_2b_2+…+a_nb_n+a_{n+1}b_{n+1} \leq \sqrt{a_1^2+a_2^2+…+a_n^2}\sqrt{b_1^2+b_2^2+…+b_n^2}+a_{n+1}b_{n+1}$ if we treat $\sqrt{a_1^2+a_2^2+…+a_n^2}$ and $\sqrt{b_1^2+b_2^2+…+b_n^2}$ as c and d, it fits P(2) So the formula above is less equal than $\sqrt{c^2+a^2_{n+1}}\sqrt{d^2+b^2_{n+1}}$ The problem is solved. Some RemarksThere are three important steps in mathematical induction: Write down clearly the inductive hypothesis P(n). prove the base case P(1) or P(2) etc. prove the inductive case, that is, show P(n) implis P(n+1) Inductive ConstructionsGray CodeIt’s an ordering of all the n-bit strings in a way such that two consecutive n-bit strings differed by only one bit. Think inductively to construct them. Every (n+1)-bit string appears exactly once. So by induction, Gray Code exists for any n. PuzzleGoal: tile the squares, except one in the middle for Bill. There are only trominos (L-shaped tiles) covering three squares: Theorem: For any $2^n \times 2^n$ puzzle, there is a tiling with Bill in the middle Base Case: (n=0) no tile is needed Induction Step: Assume can tile $2^n \times 2^n$, prove can handle $2^{n+1}\times 2^{n+1}$ Idea: It would be nice if we could control the locations of the empty square New Idea: Prove that we can always find a tiling with Bill anywhere. Theorem B: For any $2^n \times 2^n$ puzzle, there is a tiling with Bill anywhere. Base Case: (n=0) no tile is needed Induction Step: Assume we can get Bill anywhere in $2^n \times 2^n$, Porve we can get Bill anywhere in $2^{n+1}\times 2^{n+1}$. Some Remarks It may help to choose a stronger statement than the desired result, The proof of “Bill Anywhere” implicitly defines a recursive algorithm for finding such a tiling. Hadamard MatrixHadamard Matrix is an $n \times n$ matrix that all entries are $\pm 1$ and all the rows are orthogonal to each other. So by induction there is a $2^k \times 2^k$ Hadamard Matrix for any k For odd n, there isn’t $n \times n$ Hadamard Matrix A ParadoxTheorem: All horses have the same color Base Case: (n=0) no horse, true Inductive Steps: Assume any n horse have the same color, prove that any n+1 horses have the same color. So it’s true. Pay attention to the base case. The inductive steps should be inductable to the base case. Strong InductionUnstacking GameStart: a stack of boxes Move: split any stack into two stacks of sizes, a, b &gt; 0 Scoring: ab points Keep Moving until stuck Overall Score: Sum of move scores What is the best way to play the game? If we just move one box at a time: Total Score = $\sum^{n-1}_{i=1} = \frac{n(n-1)}{2}$ Claim: Starting with size n stack, the highest score will be $\frac{n(n-1)}{2}$ Base Case: (n=0) is okay Inductive Step: Assume for n-stack, and then prove C(n+1) (n+1)-stack score = $\frac{(n+1)n}{2}$ Case n+1 = 1, verify i-stack, true Case n+1 &gt; 1: (a+b)-stack score = ab + a-stack score + b-stack score by induction: a-stack score = $\frac{a(a-1)}{2}$ b-stack score = $\frac{b(b-1)}{2}$ So ab + $\frac{a(a-1)}{2}$ + $\frac{b(b-1)}{2}$ = $\frac{(n+1)n}{2}$ So C(n+1) is okay. Induction HypothesisWe assume C(a) and C(b) where 1 $\leq$ a, b $\leq$ n. But by (to use) induction can only assume C(n). the fix: rephrase the induction hypothesis to Q(n) ::= $\forall m \leq n. \ C(m)$ Proof goes through fine using Q(n) instead of C(n). So it’s OK to assume C(m) for all m $\leq$ n to prove C(n+1). Strong InductionStrong Induction: Prove P(0). Then prove P(n+1) assuming all of P(0), P(1), …, P(n) (instead of just P(n)). Conclude $\forall n. \ P(n)$ Ordinary Induction: 0 $\rightarrow$ 1, 1 $\rightarrow$ 2, 2 $\rightarrow$ 3, …, n-1$\rightarrow$ n.So by the time we get to n+1, already know all of P(0), P(1), …, P(n). The point is: assuming P(0), P(1), up to P(n), it is often easier to prove P(n+1) Divisible by a PrimeTheorem: Any integer n &gt; 1 is divisible by a prime number. Proved by Strong Induction: Theorem: Every integer &gt; 1 is a product of primes. Proof: (by strong induction) Base case is easy. Suppose the claim is true for all 2 $\leq$ i &lt; n. Consider an integer n. If n is prime, then we are done. Otherwise n = k·m for integers k, m where 2 $\leq$ k,m &lt; n. By the induction hypothesis, both k and m are product of primes. k = $p_1 \times p_2 \times … \times p^{94}$ m = $q_1 \times q_2 \times … \times q_{214}$ So n = k $\times$ m = $p_1 \times p_2 \times … \times p^{94} \times q_1 \times q_2 \times … \times q_{214}$ is a prime product. Proof complete Well Ordering PrincipleAxiom: Every nonempty set of natural numbers has a least element This axiom is in fact a consequence of mathematical induction. Without Common FactorsFor $\sqrt{2} = \frac{m}{n}$ We can always find such m, n without common factors If m, n with common factors, by WOP, there’s a minimum, but both can be divided by a same number, contradiction. Non-Fermat Theorem$$4a^3 + 2b^3 = c^3$$ There is no positive integer solutions for it. Proof: We construct the set, S ::= {a $\in \ Z^+$ | $\exist \ b, c \in Z^+, \ 4a^3 + 2b^3 = c^3$} By WOP, there exists (a, b, c) $\in$ S where a is the smallest among all “a”s Since $c^3$ is even, c is even. Let c = 2c’, then $4a^3 + 2b^3 = (2c’)^3$ So $b^3 = 4c’^3 - 2a^3$ Since $b^3$ is even, b must be even. Let b = 2b’, then $(2b’)^3 = 4c’^3 - 2a^3$ So $a^3 = 2c’^3 - 4b’^3$ Since $a^3$ is even, a must be even Well Ordering Principle in ProofsTo prove “ $\forall$ n$\in$N. P(n)” using WOP: Construct the setS ::= { n$\in$N | $\neg$P(n)} Assume $\neg$P(n) exists, so that S is a well-ordered set. By WOP, have a “least” element $n_0 \in S$ (we may have different meaning of “ small ” in some circumstances. ) Reach a contradiction (use whatever methods you want including mathematical induction) – usually by finding an element of S that is &lt; $n_0$ . Conclude that P(n) is true. QED Invariant Method Find properties (the invariants) that are satisfied throughout the whole process. Show that the target do not satisfy the properties. Conclude that the target is not achievable.]]></content>
      <categories>
        <category>note</category>
        <category>CSC3001</category>
      </categories>
      <tags>
        <tag>CSC3001</tag>
        <tag>Discrete Mathematics</tag>
        <tag>Mathematical Induction</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[6.042J L1]]></title>
    <url>%2F2019%2F09%2F18%2Fnote%2FMIT-6.042J%2F6-042J-L1%2F</url>
    <content type="text"><![CDATA[Definition of ProofProof on multiple fields: A method for ascertaining the truth.Mathematicall Proof: A mathematical proof is a verification of a proposition by a chain of logical deductions from a set of axioms. PropositionDefinitionsProposition: A statement that is either true or false.Predicate: Proposition whose truth depends on the value of variable(s) ImplicationAn implication p $\rightarrow$ q is true if p is false or q is true.An iff p $\Leftrightarrow$ q is true if p, q is both true or both false AxiomsDefinitionAn axiom is a proposition that is “assumed” to be truth. PrinciplesAxioms should be Consistent Complete A set of axioms is consistent if no proposition can be proved to be both true and false.A set of axioms is complete if it can be used to prove every proposition is either true or false. A set of such axioms is not possible to exist, it is proved by Godel.]]></content>
      <categories>
        <category>note</category>
        <category>MIT-6.042J</category>
      </categories>
      <tags>
        <tag>6.042J</tag>
        <tag>Mathematics for Computer Science</tag>
        <tag>Introduction and Proofs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EIE2050 Week3]]></title>
    <url>%2F2019%2F09%2F18%2Fnote%2FEIE2050%2FEIE2050-Week3%2F</url>
    <content type="text"><![CDATA[InverterIt performs the NOT operation.A group of inverters can be used to form the 1’s complement of a binary numberAND GateIn this course, the AND gate can have at most 4 inputs Mask10100011 AND 00001111 = 00000011 00001111 is a mask. The digit with mask 1 will stay the same, with mask 0 will always be 0. OR Gate In this course, the OR gate can have at most 4 inputs NAND Gate In hardware, it’s more simple than AND Gate. Practically, an AND Gate is implemented by two NAND Gate, an OR Gate is implemented by three NAND Gate. You can represent NOT, OR, AND with NAND Gate. So NAND Gate is called universal gate. Inputs A Inputs B Output X 0 0 1 0 1 1 1 0 1 1 1 0 NOR Gate You can represent NOT, OR, AND with NOR Gate. So NOR Gate is also called universal gate. Inputs A Inputs B Output X 0 0 1 0 1 0 1 0 0 1 1 0 XOR Gate X means exclusive. XOR–Exclusive-Or. XOR Gate produces a HIGH output when both inputs are at opposite logic levels. Inputs A Inputs B Output X 0 0 0 0 1 1 1 0 1 1 1 0 It’s written as $X = \overline{A}B + A\overline{B}$ or $X = A \oplus B$ XNOR Gate XNOR Gate produces a HIGH output when both inputs are at same logic levels. Inputs A Inputs B Output X 0 0 1 0 1 0 1 0 0 1 1 1]]></content>
      <categories>
        <category>note</category>
        <category>EIE2050</category>
      </categories>
      <tags>
        <tag>EIE2050</tag>
        <tag>Digital Logic and Systems</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3001 Week3]]></title>
    <url>%2F2019%2F09%2F18%2Fnote%2FCSC3001%2FCSC3001-Week3%2F</url>
    <content type="text"><![CDATA[Methods of ProofDirect ProofProving an ImplicationTo prove an implication: If P, the Q.Method 1: Write assume P, then show that Q logically follows.Contrapositive Proving an ImplicationTo prove an implication: If P, the Q. Method 2: Prove the contrapositive, i.e. prove “not Q implies not P” Proving an “if and only if”Method 1a: Prove P implies Q and Q implies P Method 1b: Prove P implies Q and not P implies not Q Method 2: Construct a chain of if and only if statement(What is this?) Proof by Contradiction$$\frac{\overline{P} \rightarrow F}{P}$$ To prove P, you prove that not P would lead to a ridiculous result, and so P must be true. Infinitude of the PrimesTheorem: There are infinitely many prime numbers. Proof by contradiction: Assume there are only finitely many primes.Let $p_1$, $p_2$, …, $p_k$ be all the primes.(1) We will construct a number N so that is not divisible by any $p_i$By our assumption, it means that N is not divisible by any prime number.(2) On the other hand, we show that any number is divisible by any $p_i$.This will lead to a contradiction, and therefore the assumption must be false.So there must be infinitely many primes. Proof by Casese.g. want to prove the square of a nonzero number is always positive. x is positive or x is negative if x is positive, then $x^2 &gt; 0$ if x is negative, then $x^2 &gt; 0$ $\therefore x^2 &gt; 0$]]></content>
      <categories>
        <category>note</category>
        <category>CSC3001</category>
      </categories>
      <tags>
        <tag>CSC3001</tag>
        <tag>Discrete Mathematics</tag>
        <tag>Methods of Proof</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3100 Week2]]></title>
    <url>%2F2019%2F09%2F14%2Fnote%2FCSC3100%2FCSC3100-Week2%2F</url>
    <content type="text"><![CDATA[Sorting ProblemInput: a sequence of n numbers &lt; $a_1$, $a_2$,…, $a_n$&gt; Output: a permutation (reordering) &lt; $a’_1$, $a’2$,…, $a’_n$&gt; of input such that $a’1 \leq a’2\leq…\leq a’n$ . Stored in arrays. The numbers are referred as keys. Associated with additional information (satellite data) Several ways to solve. Bubble SortBubble sort and insertion sort has the same running time. Loop InvariantA property of the loop: Initialization: true before the begin of loop Maintenance: if true before an iteration, then also true after it. Termination: when the loop stops, use the invariant to show the algorithm is correct Similar to the mathematical induction Insertion Sort Incremental Sorting Algorithm Start with an empty left hand Pick up one card and insert it into the correct position To find the correct position, compare it with each of the cards in the hand, from right to left The cards held in the left hand are sorted Analysis of Insertion SortBest Case: The array is sorted$T(n) = 1$ Worst Case: The array is in reverse order$T(n) = \sum^n_{j=2}j = (\sum^n_{j=1}) - 1 = \frac{n(n+1)}{2} - 1$ T(n) = cost*times Always consider the worse case When comparing them, we only keep the higher order term. Average Case of Insertion SortThe worst case is about half of the worst case time, but still a quadratic of n. Recursion Self-reference Recursive function: based upon itself Solution of the whole problem is composed of solutions of sub-problems Insertion Sort in Recursion Base Case: If array size is 1 or smaller, return. Recursively sort first n-1 elements Insert the element in the correct position in sorted array Devide and ConquerDivide the problem into a number of subproblems Conquer the subproblems by solving them recursively (further divide if not small enough). Combine the subproblem solutions to give a solution to the original problem. Merge SortBased on Devide and Conquer. Its worst-case running time has a lower order of growth rate than insertion sort. Devide into smaller arrays, recursively devide, sort them, combine. Merge Think of two piles of cards. Each pile is sorted and placed face-up on a table with the smallest cards on top. We will merge them into a single sorted pile. Basic idea Choose the smaller of the two top cards Remove it from its pile Repeat ImporvementNeed to check whether one of two arrays is empty Low efficiency and not good implementation Solution:Put a special sentinel card at bottomWe use ∞, which is guaranteed to lose to any other value. Compare with Insertion Sort Compared to insertion sort (worst-case time is a quadratic of n), merge sort is faster. On small inputs, insertion sort may be faster. But for large enough inputs, merge sort will always be faster. Analyzing Dibide and Conquer AlgorithmsSuppose N is a power of 2$$\begin{equation}\left{ \begin{array}{lr} c &amp; if \ n = 1 \ 2T({\frac{n}{2}}) + cn &amp; if \ n &gt; 1 \end{array}\right.\end{equation}$$$T(1) = C$ $T(N) = 2T(\frac{N}{2})+CN$ $\frac{T(N)}{N} = \frac{T(\frac{N}{2})}{\frac{N}{2}}+C = … = \frac{T(1)}{1} + C\log N$ So $T(N) = CN\log N + CN = O(N\log N)$]]></content>
      <categories>
        <category>note</category>
        <category>CSC3100</category>
      </categories>
      <tags>
        <tag>CSC3100</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3001 Week2]]></title>
    <url>%2F2019%2F09%2F10%2Fnote%2FCSC3001%2FCSC3001-Week2%2F</url>
    <content type="text"><![CDATA[SetBasic DefinitionsDefinitionDefinition: A set is an unordered collection of distinct objects.Objects in a set is called element or member, and they are contain in the set. Classical Sets symbol meaning $Z$ the set of all integers $Z^{+}$ the set of all positive integers $Z^{-}$ the set of all negative integers $N$ the set of all nonnegative integers $R$ the set of all real numbers $Q$ the set of all rational numbers $C$ the set of all complex numbers Method to Define Set by Properties${x \in A | P(x)}$ means that it is a set that its elements x, in A, such that x satisfies property P.$|S|$ is defined as the number of elements contained in S. Membership$A \subseteq B$ $\leftrightarrow$ For any $x \in A$, $x \in B$A = B $\leftrightarrow$ $A \subseteq B$ and $B \subseteq A$$A \subset B$ $\leftrightarrow$ $A \subseteq B$ and $A \ne B$ Operations on SetsBasic OperationIntersection: $A \cap B = {x \in U | x \in A \ and \ x \in B}$Union: $A \cup B = {x \in U | x \in A \ or \ x \in B}$ $|A \cup B| = |A| + |B| - |A \cap B|$ difference: $A - B = {x \in U | x \in A \ and \ x \not\in B}$ $|A - B| = |A| - |A \cap B|$ complement: $\overline{A} = A^C = {x \in U | x \not\in A} If $A \subseteq B$, then $\overline{B} \subseteq \overline{A}$ Union and Intersection of an Indexed Collection of Sets$\underset{i=0}{\overset{n}{\cup}} A_i$ = {x $\in$ U | x $\in \ A_i$ for at least one i = 0, 1, 2, .., n} $\underset{i=0}{\overset{\infin}{\cup}} A_i$ = {x $\in$ U | x $\in \ A_i$ for at least one nonnegative integer i} $\underset{i=0}{\overset{n}{\cap}} A_i$ = {x $\in$ U | x $\in \ A_i$ for all i = 0, 1, 2, .., n} $\underset{i=0}{\overset{\infin}{\cup}} A_i$ = {x $\in$ U | x $\in \ A_i$ for all nonnegative integers i} Partitions of SetsDisjoint: Two sets are disjoint if their intersection is empty. Partition: A collection of nonempty sets ${A_1, A_2, …, A_n}$ is a partition of A, where $A = A_1+ A_2+ …+ A_n$ and they are pairwise disjoint. Cartesian Products$A \times B = {(a, b) | a \in A, b \in B}$ So: $|A_1 \times A_2 \times … \times A_k| = |A_1| \times |A_2| \times … \times |A_k|$ Note: (a, b) is ordered pair, means the ordering is important Set Identities Name Expression Communicative Law $A \cup B = B \cup A$ / $A \cap B = B \cap A$ Associative Law $(A \cup B) \cup C = A \cup (B \cup C)$ / $(A \cap B) \cap C = A \cap (B \cap C)$ Distributive Law $A \cup (B \cap C) = (A \cup B) \cap (A \cup C)$ / $A \cap (B \cup C) = (A \cap B) \cup (A \cap C)$ Identity Law $A \cup \varnothing = A$ / $A \cap U = A$ Complement Law $A \cup A^C = U$ / $A \cap A^C = \varnothing$ De Morgan’s Law $(A \cup B)^C = A^C \cap B^C$ / $(A \cap B)^C = A^C \cup B^C$ Set Difference Law $A - B = A \cap B^C$ First Order LogicQuantifiersPredicatesPredicates are propositions (i.e. statements) with variables. The truth of a predicate depends on the domain. Universal Quantifier: $\forall x$: For all xExistential Quantifier: $\exists y$: There exists some y Negation$$\neg \forall xP(x) \equiv \exists x \neg P(x)$$$$\neg \exists xP(x) \equiv \forall x \neg P(x)$$ Multiple QuantifiersOrder of QuantifiersOrder of quantifiers is very important.You can change the order of two “forall”s and two “exists”s, but you can’t change the order of “forall” and “exists”. Arguments of Quantified StatementsValidityA quantified argument (i.e. arugment with variables, quantifiers) is valid if the conclusion is true whenever the assumptions are true. Universal Generalization$$\frac{a \rightarrow R(c)}{A \rightarrow \forall x .R(x)}$$ providing c is independent of A]]></content>
      <categories>
        <category>note</category>
        <category>CSC3001</category>
      </categories>
      <tags>
        <tag>CSC3001</tag>
        <tag>Discrete Mathematics</tag>
        <tag>Sets</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CS106A L1L2L3L4L5]]></title>
    <url>%2F2019%2F09%2F09%2Fnote%2FStanford-CS106A%2FCS106A-L1L2L3L4L5%2F</url>
    <content type="text"><![CDATA[IntroductionBasic StructureChange it after Karel finished.1234567public class Name extends Karel &#123; public void run() &#123; command(); ... command(); &#125;&#125; IndentJava doesn’t care about indent and space. Name and IdentifiersJava is case sensitive. Your program’s file must match exactly your class name. Identifier: A name given to an item in your program. CommentsSyntax: // comments, one line OR /* commentsmuliple lines*/ MethodsDeclaring a Method123456public void name() &#123; statement; statement; ... statement;&#125; Use Your Own MethodJust write down the method name with a parenthesis. Note that you can use a method that is defined after. Special Method RunEvery class should have a method run: 123public void run() &#123;&#125; The method which the name is “run” will be executed automatically. If you don’t have the method “run”, there will be nothing done. Just like “main” in C++ Control FlowFor Loop1234567for (int i = 0; i &lt; max; i++) &#123; statement; statement; statement; ... statement;&#125; 1234567for (initiallization; test; update) &#123; statement; statement; statement; ... statement;&#125; If Statement1234567if (Boolean Values) &#123; statement;&#125; else if &#123; statement;&#125; else &#123; statement;&#125; While Loop123while (Boolean Values) &#123; statements;&#125; Console Programming12345public class Name extends ConsoleProgram &#123; statement; ... statement;&#125; Commands Commands Usages println() print a line out Esacpes Commands Usages \&quot; &quot; When using &quot; in a string \\ \ \t tab character \n new line character Expressions and VariablesData TypesPrimitive Types Name Description int integer double real numbers char single text characters boolean logical values Integer Division: Java always rounds down to get an integer. Mixing TypesWhen int and double is mixed, double will be the result.When string and any other data type is mixed, a longer string will be the result. Change Data TypesVariables(data type) name = xxx Logical Operators Operator Description &amp;&amp; and ` ! not]]></content>
      <categories>
        <category>note</category>
        <category>Stanford-CS106A</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Multiline Formula in LaTex]]></title>
    <url>%2F2019%2F09%2F08%2Fnote%2Ftex%2Fmultiline-in-tex%2F</url>
    <content type="text"><![CDATA[When writing multiline formula with Mathjax in Hexo:$$\begin{equation}\begin{split} a&amp;=b+c-d\&amp;\quad +e-f\&amp;=g+h\&amp; =i\end{split}\end{equation}$$ 12345\begin&#123;equation&#125;\begin&#123;split&#125; a&amp;=b+c-d\\&amp;\quad +e-f\\&amp;=g+h\\&amp; =i\end&#123;split&#125;\end&#123;equation&#125; \begin and \end represent the begin and end of the formula \\ as the break line symbol &amp; for align Notice: In Hexo, \\ is an escape for \, in order to write double backslash, in Hexo you should write \\\\ 12345\begin&#123;equation&#125;\begin&#123;split&#125; a&amp;=b+c-d\\\\&amp;\quad +e-f\\\\&amp;=g+h\\\\&amp; =i\end&#123;split&#125;\end&#123;equation&#125; $$\begin{equation}\begin{split} a&amp;=b+c-d\\&amp;\quad +e-f\\&amp;=g+h\\&amp; =i\end{split}\end{equation}$$]]></content>
      <categories>
        <category>note</category>
        <category>tex</category>
      </categories>
      <tags>
        <tag>tex</tag>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python Cvxpy Install on Win10]]></title>
    <url>%2F2019%2F09%2F07%2Fnote%2Fpython%2Fcvxpy%2Fcvxpy-install%2F</url>
    <content type="text"><![CDATA[Upgrade pip first: python -m pip install --upgrade pip. Try pip install cvxpy, if success, everything is done.If an error occur: Donwload wheel files from https://www.lfd.uci.edu/~gohlke/pythonlibs/, and use pip install filename.whl to install them.Remember to download the correct version of the wheel file:“cpxx” is the version of python and what’s followed is the operation system’s version.]]></content>
      <categories>
        <category>note</category>
        <category>python</category>
        <category>cvxpy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>cvxpy</tag>
        <tag>optimization</tag>
        <tag>convex optimation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3100 Week1]]></title>
    <url>%2F2019%2F09%2F07%2Fnote%2FCSC3100%2FCSC3100-Week1%2F</url>
    <content type="text"><![CDATA[Data StructuresDefinitions Objects created to organize data used in computation Means of storing and organizing data to facilitate access and modifications. Several Common Data Structures Array Linked List Stack Queue Heap Hash Table Tree Graph AlgorithmsDefinitionA problem-solving method suitable for implementation as a computer program. Mathematics ReviewAll log are to be base 2 unless specified otherwise. Iterated LogarithmIterated logarithm of n, written $\log ^{*}n$(read “log star”) $$\log ^{*}n:={\begin{cases}0&amp;{\mbox{if }}n\leq 1;\\1+\log ^{*}(\log n)&amp;{\mbox{if }}n&gt;1\end{cases}}$$ Some NotationsMod$7 % 3 = 2$ Equivalence$8 \equiv 15(mod 7)$]]></content>
      <categories>
        <category>note</category>
        <category>CSC3100</category>
      </categories>
      <tags>
        <tag>CSC3100</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EIE2050 Week2]]></title>
    <url>%2F2019%2F09%2F04%2Fnote%2FEIE2050%2FEIE2050-Week2%2F</url>
    <content type="text"><![CDATA[The meaning of NumberWhat’s the meaning of $(123.456)_{10}$, $(101.101)_{2}$?What’s the meaning of $(abc.def)_{g}$?$(123.456)_{10} = 1*10^2+2*10^1+3*10^{0}+4*10^{-1}+5*10^{-2}+6*10^{-3}$ $(101.101)_{2} = 1*2^2+0*2^{1}+1*2^{0}+1*2^{-1}+0*2^{-2}+1*2^{-3}$ $(abc.def)_{g} = a*g^2+b*g^{1}+c*g^{0}+d*g^{-1}+e*g^{-2}+f*g^{-3}$ We can understand any arbitrary number system in this way. Conversion of number system of different base with decimalI have learned before. Problems in Computer Science What is the problem? How is the problem solved? Why is the solution correct? Ask the three questions for any topic in Computer Science. Represent Minus Number in ComputerLeave a Bit for Minus SymbolThis is the easiest way to represent negative number. But it will cause some waste.Because +0 and -0 is the same number, so there will be waste in every byte. Commonly Used WayComputers use a modified 2’s complement for signed numbers. Positive numbers are stored in true form (with a 0 for the sign bit) and negative numbers are stored in complement form (with a 1 for the sign bit). Easy Way to Read Minus NumberAssign the sign bit a column weight of -128 (for an 8-bit number). Then add the column weights for the 1’s. e.g. $(11000110)_2$ is 2’s complement of -58 Then 1 1 0 0 0 1 1 0 -128+64+0+0+0+4+2 = -58 Addition and Subtraction in digital systemWe are able to use the addition operation to replace the subtraction operation.In another word, addition and subtraction in digital system are the same.$$\begin(111)_2-(101)_2\\&amp;=(111)_2+[ (1000)_2-(101)_2 ]\\ \end$$ 1’s ComplementThe 1’s complement of a binary number is just the inverse of the digits. To form the 1’s complement, change all 0’s to 1’s and all 1’s to 0’s. In digital circuits, the 1’s complement is formed by using inverters. 2’s ComplementThe 2’s complement of a binary number is found by adding 1 to the LSB of the 1’s complement. the 1’s complement of 11001010 is 00110101, 2’s complement if 11001010 is 00110110.]]></content>
      <categories>
        <category>note</category>
        <category>EIE2050</category>
      </categories>
      <tags>
        <tag>EIE2050</tag>
        <tag>Digital Logic and Systems</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tips for Writing LaTex Code]]></title>
    <url>%2F2019%2F09%2F03%2Fnote%2Ftex%2Ftex%2F</url>
    <content type="text"><![CDATA[CommandsLogical Operators Name Symbol Code negation $\neg$ \lnot or \neg overline $\overline{overline}$ \overline{overline} and $\land$ \wedge or \land or $\vee$ \lor or \vee exclusive-or $\oplus$ \oplus equivalence $\equiv$ \equiv tautology $\top{}$ \top contradiction $\bot$ \bot universal quantification $\forall$ \forall existential quantification $\exists$ \exists Because $\because$ \because Therefore $\therefore$ \therefore Greek Letters Symbol Code A / $\alpha$ A / \alpha B / $\beta$ B / \beta $\Gamma$ / $\gamma$ \Gamma / \gamma $\Delta$ / $\delta$ \Delta / \delta E / $\epsilon$ / $\varepsilon$ E / \epsilon / \varepsilon Z / $\zeta$ Z / \zeta H / $\eta$ H / \eta $\Theta$ / $\theta$ / $\vartheta$ \Theta / \theta / \vartheta I / $\iota$ I / \iota K / $\kappa$ / $\varkappa$ K / \kappa / \varkappa $\Lambda$ / $\lambda$ \Lambda / \lambda M / $\mu$ M / \mu N / $\nu$ N / \nu $\Xi$ / $\xi$ \Xi / \xi O / $\omicron$ O / \omicron $\Pi$ / $\pi$ / $\varpi$ \Pi / \pi / \varpi $P$ / $\rho$ / $\varrho$ P / \rho / \varrho $\Sigma$ / $\sigma$ / $\varsigma$ \Sigma / \sigma / \varsigma $T$ / $\tau$ \T / \tau $\Upsilon$ / $\upsilon$ \Upsilon / \upsilon $\Phi$ / $\phi$ / $\varphi$ \Phi / \phi / \varphi $X$ / $\chi$ X / \chi $\Psi$ / $\psi$ \Psi / \psi $\Omega$ / $\omega$ \Omega / \omega Relation Operators Name Symbol Code Not less than $\nless$ \nless Not greater than $\ngtr$ \ngtr Less than or equal to $\leq$ / $\leqslant$ \leq / \leqslant Greater than or equal to $\geq$ / $\geqslant$ \geq / \geqslant Neither less than nor equal to $\nleq$ / $\nleqslant$ \nleq / \nleqslant Neither greater than nor equal to $\ngeq$ / $\ngeqslant$ \ngeq / \ngeqslant Is member of $\in$ \in Has member $\ni$ \ni Is not member of $\not\in$ \not\in Hasn’t member $\not\ni$ \not\ni Is a proper subset of $\subset$ \subset Is a proper superset of $\supset$ \supset Is not a proper subset of $\not\subset$ \subset Is not a proper superset of $\not\supset$ \supset Is a subset of $\subseteq$ \subseteq Is a superset of $\supseteq$ \supseteq Is not a subset of $\not\subseteq$ \subseteq Is not a superset of $\not\supseteq$ \supseteq Approximately $\approx$ \approx Not equal to $\neq$ \neg / \ne Others Name Symbol Code overset $\overset{over}{N}$ \overset{over}{N} underset $\underset{under}{N}$ \underset{under}{N} binom $\binom{a}{b}$ \binom{a}{b} ceil $\lceil x \rceil$ \lceil x \rceil floor $\lfloor x \rfloor$ \lfloor x \rfloor EscapesIn hexo Command Represents \_ _ \\\\ \\(It is the break line symbol of) &amp; &amp;(hexo will take care of the “&amp;” escape for you)]]></content>
      <categories>
        <category>note</category>
        <category>tex</category>
      </categories>
      <tags>
        <tag>tips</tag>
        <tag>note</tag>
        <tag>usage</tag>
        <tag>tex</tag>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSC3001 Week1]]></title>
    <url>%2F2019%2F09%2F03%2Fnote%2FCSC3001%2FCSC3001-Week1%2F</url>
    <content type="text"><![CDATA[Problems in Computer Science Problem Modelling Model Analysis(feasibility, complexity, etc.) Design Algorithms Algorithm Analysis(efficiency, bugs, etc.) Problem Detection Discrete MathematicsDiscrete Mathematics is a collection of some topics in math. Topics discussed in class Logic and Proofs Number Theory Graph Theory Counting Propositional LogicMathematical ProofWe need a rigorous system to prove mathematic theorems. Logic, Basic OperatorsStatement: A statement is a sentence that is either True or False Logic Operators: Logic operators are used to construct new statements from old statements. Three main logic operators: “NOT”, “AND”, “OR” Notations: $$\lnot{} ::=NOT$$ $$\neg{}P = \overline{P}$$ $$\land{} ::= AND$$ $$\vee{} ::= OR$$ Some more logical operatrs: exclusive-or: $\oplus$ p q $p\oplus{}q$ T T F T F T F T T F F F majority: P Q R M(P, Q, R) T T T T T T F T T F T T T F F F F T T T F T F F F F T F F F F F Using Simple Operators to Construct Any OperatorTake the example of the exclusive-or: Idea 0: Guess and Check$p\oplus{}q \equiv{} (p \land{} q) \vee{} \neg{}(p \vee{} q)$ Logical Equivalence: Two statements have the same truth table. Idea 1: Look at Each True Row p q $p\oplus{}q$ T T F T F T F T T F F F $(p \land{} \neg{}q) \vee{} (\neg{}p \land{} q)$ Only the second row or the third row is true that the input is true. So:$(p \land{} \neg{}q)$ is for second row.$(\neg{}p \land{} q)$ is for third row.and use “OR” $\vee{}$ to linked them. Look at the true rows and take the “or” Idea 2: Look at Each False RowAlmost the same thinking pattern as Idea 1 Look at the false rows, negate and take the “and” Logical Equivalence, DeMorgan’s LawDeMorgan’s Law$\neg{}(p \land{} q) \equiv{} \neg{}p \vee{} \neg{}q$$\neg{}(p \vee{} q) \equiv{} \neg{}p \land{} \neg{}q$ Logical Rules name expression1 expression2 Communicative Laws $p \land{} q \equiv{} q \land{} p$ $p \vee{} q \equiv{} q \vee{} p$ Associative Laws $(p \land{} q) \land{} r \equiv{} p \land{} (q \land{} r)$ $(p \vee{} q) \vee{} r \equiv{} p \vee{} (q \vee{} r)$ Distributive Laws $p \land (q \vee r) \equiv (p \land q) \vee (p \land r)$ $p \vee (q \land r) \equiv (p \vee q) \land (p \vee r)$ Identity Laws $p \land{} t \equiv{} p$ $p \vee{} c \equiv{} p$ Negation Laws $p \vee{} \neg{}p \equiv{} t$ $p \land{} \neg{}p \equiv{} c$ Double Negative Law $\neg{}(\neg{}p) \equiv{} p$ Idempotent Laws $p \land{} p$ $p \vee{} p$ Universal Bound Laws $p \vee{} t \equiv{} t$ $p \land{} c \equiv{} c$ De Morgan’s Laws $\neg{}(p \land{} q) \equiv{} \neg{}p \vee{} \neg{} q$ $\neg{}(p \vee{} q) \equiv{} \neg{}p \land{} \neg{} q$ Absorption Laws $p \vee{} (p \land{} q) \equiv{} p$ $p \land{} (p \vee{} q) \equiv{} p$ Negation of t and c $\neg{}t \equiv{} c$ $\neg{}c \equiv{} t$ t means “tautology” and c means “contradiction” You can use those rules to simplify the statement. Tautology, ContradictionA tautology is a statement that is always true. A contradiction is a statement that is always false.(negation of a tautology) Conditional Statement (if, if and only if)If-Then StatementIf p the q/ p implies q: $p \rightarrow q$ p is called the hypothesis; q is called the conclusion. Logic Operator$$\rightarrow ::= IMPLIES$$ P Q $P \rightarrow Q$ T T T T F F F T F F F T Convention: if we don’t say anything wrong, then it is not false, and thus true. The above is the most important point #### Logical Equivalence $p \rightarrow q \equiv$ ? Also three ways to deal with it: Truth Table Logical Rules Intuition Truth Table P Q $P \rightarrow Q$ T T T T F F F T T F F T Obviously, take the false row is easier. $\therefore \neg (P \land \neg Q) \equiv \neg P \vee Q$ Negation of If-Then$\neg (p \rightarrow q) \equiv$ ? $$\neg (P \rightarrow Q)$$$$\equiv \neg (\neg P \vee Q)$$$$\equiv \neg \neg P \land \neg Q$$$$\equiv P \land \neg Q$$ Contrapositive(逆否)The contrapositive of “if p then q” is “if %\neg$ q then %\neg$ p”. Fact: A conditional statement is logically equivalent to its contrapositive. Proof with Logical Rules: $P \rightarrow Q \equiv \neg P \vee Q \equiv Q \vee \neg P \equiv \neg Q \rightarrow \neg P$ If, Only If(Necessary AND Sufficient Condition)$\leftrightarrow ::= IFF$ R if S means: “if S then R”, then S is sufficient condition for R R only if S means: “if R then S“, then S is a necessary condition for R Necessary, Sufficient ConditionIf A is necessary condition of B, then B is sufficient condition of A. ArgumentsAn argument is a sequence of statements. All statements but the final one are called assumptions or hypothesis.The final statement is called the conclusion. An argument is valid if:whenever all the assumptions are true, then the conclusion is true. Valid argument not implies True conclusionTrue conclusion implies Valid argument Two Types of Valid ArgumentsAssumptions and Conclusions Have ConnectionSuch argument should contain conditional statement. If there exists conditions that makes the assumptions and conclusions to be true at the same time, the argument is a valid argument. Assumptions and Conclusions Do not Have ConnectionWhether the argument is valid or not have nothing to do with the assumptions. Valid argument means true conclusion and vice versa. Ways to Identify Valid ArgumentsTautologyAn argument is valid iff $(P_{1} \land P_2 \land … \land P_n) \rightarrow Q$ is tautology. ContradictionSet the conclusion to be False, is it possible that call hypothesis is True? If it is possible, then it is an invalid argument; On the contrary, it is a valid argument. Valid Argument Forms Name Expression A Expression B Modus Ponens $p \rightarrow q$$p$$\therefore q$ Modus Tollens $p \rightarrow q$$\neg q$$\therefore \neg p$ Generalization $p$$\therefore p \vee q$ $q$$\therefore p \vee q$ Speciallization $p \land q$$\therefore p$ $p \land q$$\therefore q$ Conjunction $p$$q$$\therefore p \land q$ Elimination $p \vee q$$\neg q$$\therefore p$ $p \vee q$$\neg p$$\therefore q$ Transitivity $p \rightarrow q$$q \rightarrow r$$ \therefore p \rightarrow r$ Proof by Division into Cases $p \vee q$$p \rightarrow r$$q \rightarrow r$$\therefore r$ Contradiction Rule $\neg p \rightarrow c$$\therefore p$]]></content>
      <categories>
        <category>note</category>
        <category>CSC3001</category>
      </categories>
      <tags>
        <tag>CSC3001</tag>
        <tag>Discrete Mathematics</tag>
        <tag>Propositional Logic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EIE2050 Week1]]></title>
    <url>%2F2019%2F09%2F02%2Fnote%2FEIE2050%2FEIE2050-Week1%2F</url>
    <content type="text"><![CDATA[Before lectureThere’s a difference in mathematical logic(数理逻辑), digital logic(数字逻辑).A new programming language“AND”, “OR”, “NOT” can consist a programming language. And they are called logical gates. These three can be compressed in to one element. One-base Half Adder(加法器)Binary Add0+0 = 00+1 = 11+0 = 11+1 = $(10)_2$ Binary Digital OperationYou can treat 0 as False and 1 as True Results: 1 AND 1 = 11 AND 0 = 00 AND 1 = 00 AND 0 = 0 1 OR 1 = 11 OR 0 = 10 OR 1 = 10 OR 0 = 0 NOT 1 = 0NOT 0 = 1 One bit addition: Others are the same as binary addition. 1 + 1 = 0 Truth Table(真值表)Z = X + Y X Y Z 0 0 0 0 1 1 1 0 1 1 1 0 Z = [(not X) and Y] OR [X and not Y] Can also be written into: $$Z = \overline{X} · Y + X · \overline{Y}$$ Notations: +: OR ·: AND -(overline): NOT Only consider the situation where Z == 1. n-base Half Addern-base half adder will have $2^{2n}$ lines. How to solve the situation that have too many lines? Full AdderUsing Caries(进位) $C_{in}$ for carry in and $C_{out}$ for carry out. Z + $C_{out}$ = X + Y + $C_{in}$ X Y $C_{in}$ Z $C_{out}$ 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 1 1 0 1 1 0 0 0 1 1 0 1 1 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 1 $$Z = \overline{X} · \overline{Y} · C_{in} + X · \overline{Y} · \overline{C_{in}} + \overline{X} · Y · \overline{C_{in}} + X · Y · C_{in}$$ $$C_{out} = X · Y · \overline{C_{in}} + X · \overline{Y} · C_{in} + \overline{X} · Y · C_{in} + X · Y · C_{in}$$ Put n For Adder together and linked their Carry Ins and Carry Outs together can be a n-bit adder. The first adder’s $c_{in}$ should be 0. Comparitor(比较器)For one bit comparitor F, G, H F(smaller than): 1, if X=1, Y=0; 0, otherwise G(equal): 1, if (X=1, Y=1) OR (X=0, Y=0); 0, otherwise H(greater than): 1, if X=0, Y=1; 0, otherwise So:$$F = X · \overline{Y}$$$$G = X · Y + \overline{X} · \overline{Y}$$$$H = \overline{X} · Y$$ Analog(模拟)It is a big problem: digital vs. analog From digital to analog: Sampling(采样) + Quantization(量化) Sampling: Select samples with the same time interval. (Avoid infinity in time) Quantization: For each sample point, approximate the amplitude/magnitude to finite precision. Digital Waveforms and Pulse Definitions clock is a basic timing signal that is an example of a periodic wave. It is used to synchronized actions. Serial(串行) and Parallel(并行) DataData can be transmitted by either serial transfer or parallel transfer. Basic Logic FunctionsAND: OR: NOT: You can use the above three to design any logical functions. Some More Key Items Fixed-function Logic: A category of digital integrated circuits having functions that cannot be altered. Programmable logic: A category of digital integrated circuits capable of being programmed to perform specified functions.]]></content>
      <categories>
        <category>note</category>
        <category>EIE2050</category>
      </categories>
      <tags>
        <tag>EIE2050</tag>
        <tag>Digital Logic and Systems</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CS50 Beyond Python, Flask, OOP and AI]]></title>
    <url>%2F2019%2F08%2F19%2Fnote%2FCS50%20Beyond%2Fpython%2F</url>
    <content type="text"><![CDATA[Flask SessionWe will use a flask extension called “flask_session”1234567891011121314from flask import Flask, render_template, sessionfrom flask_session import Sessionfrom tempfile import mkdtempapp = Flask(__name__)app.config[&quot;SESSION_FILE_DIR&quot;] = mkdtemp()app.config[&quot;SESSION_PERMANENT&quot;] = Falseapp.config[&quot;SESSION_TYPE&quot;] = &quot;filesystem&quot;Session(app)@app.route(&apos;/&apos;)def index(): return session “session” is a dict that differ for every session. Store your temporary app data in it.]]></content>
      <categories>
        <category>note</category>
        <category>CS50 Beyond</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>CS50</tag>
        <tag>beyond</tag>
        <tag>oop</tag>
        <tag>ai</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CS50 Beyond SQL, ORMs, APIs]]></title>
    <url>%2F2019%2F08%2F19%2Fnote%2FCS50%20Beyond%2Fsql%2F</url>
    <content type="text"><![CDATA[In this course we use PostgreSQL.Data Types Data Type Usage INTEGER Storing integer DECIMAL Storing floating point number SERIAL A SERIAL will increment every time(like AUTOINCREMENT in sqLite) VARCHAR For a number of characters TIMESTAMP Store time BOOLEAN Ture or False ENUM Fix finite number of values Constraints Constraints Meaning NOT NULL Column cannot be empty UNIQUE All the data in that column should be unique PRIMARY KEY Primary key of the table. A table can have at most one primary key DEFAULT specify the default value of a column CHECK Used to enforce some constraints in the database Example for CHECK: CHECK A &gt; 0, means that you can’t add negative INTEGER to the column A Functions SUM COUNT MIN MAX AVG Example: SELECT SUM(*) FROM xxx/SELECT COUNT(*) FROM xxxThe database will return a column which column name is the function name. SQLAlchemyExample code for using SQLAlchemy 12345from sqlalchemy import create_enginefrom sqlalchemy.orm import scoped_session, sessionmakerengine = create_engine(&quot;database address&quot;)db = scoped_session(sessionmaker(bind=engine)) After that, use db.execute to retrieve data. SQLAlchemy can insert the arguments safely.You should use the following way to weite the code. 1db.execute(&quot;INSERT INTO xxx VALUES (:a, :b, :c)&quot;, &#123;&quot;a&quot;: a, &quot;b&quot;: b, &quot;c&quot;: c&#125;) ORMsORM stands for Object Relational Mapping. ORMs let you treat rows and tables inside of a database the same way you would treat an object and classes in an object oriented programming language. With ORM, you can use a class to reference a table. “flask_sqlalchemy” is a library that enables you to use sqlalchemy in flask application. 12345678910from flask_sqlalchemy import SQLAlchemydb = SQLAlchemy()class Flight(db.Model): __tablename__ = &quot;flight&quot; (your table name) id = db.Column(db.Integer, primary_key=True) (each represents a column) origin = db.Column(db.String, nullable=False) destination = db.Column(db.String, nullable=False) duration = db.Column(db.Integer, nullable=False) The route file: 1234567891011121314151617app = Flask(__name__)app.config[&quot;SQLALCHEMY_DATABASE_URI&quot;] = &quot;your database url&quot;app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = Falsedb.init_app(app)def main(): f = open(&quot;flights.csv&quot;) reader = csv.reader(f) for origin, destination, duration in reader: flight = Flight(origin=origin, destination=destination, duration=duration) db.session.add(flight) print(f&quot;Added flight from &#123;origin&#125; to &#123;destination&#125; lasting &#123;duration&#125; minutes.&quot;) db.session.commit()if __name__ == &quot;__main__&quot;: with app.app_context(): main() Commands in SQLAlchemy: commands usage db.create_all() create table flight=Flight(origin=&#39;xxx&#39;, destination=&#39;xxx)db.session.add(flight) insert data Flight.query.all() SELECT * FROM flights Flight.query.filter_by(origin=&quot;Paris&quot;).all() SELECT * FROM flights WHERE origin = &#39;Paris&#39; Flight.query.filter_by(origin=&quot;Paris&quot;).count() SELECT COUNT(*) FROM flights WHERE origin = &#39;Paris&#39; Flight.query.filter_by(id=28).first()Flight.query.get(28) SELECT * FROM flights WHERE id = 28 flight = Flight.query.get(6)flight.duration = 280 UPDATE flights SET duration = 280 WHERE id = 6 flight = Flight.query.get(28)db.session.delete(flight) DELETE FROM flights WHERE id = 28 db.session.commit() COMMIT Flight.query.order_by(Flight.origin).all() SELECT * FROM flights ORDER BY origin Flight.query.order_by(Flight.origin.desc()).all() SELECT * FROM flights ORDER BY origin DESC Flight.query.filter(Flight.origin != &quot;Paris&quot;).all() SELECT * FROM flights WHERE origin != &#39;Paris&#39; Flight.query.filter(Flight.origin.like(&quot;%a%&quot;)).all() SELECT * FROM flights WHERE origin LIKE &#39;%a%&#39; Flight.query.filter(Flight.origin.in_([&quot;Tokyo&quot;, &quot;Paris&quot;])).all() SELECT * FROM flights WHERE origin IN (&#39;Tokyo&#39;, &#39;Paris&#39;) Flight.query.filter(and_(Flight.origin == &quot;Paris&quot;, Flight.duration &gt; 500)).all() SELECT * FROM flights WHERE origin = &#39;Paris&#39; AND duration &gt; 500 Flight.query.filter(or_(Flight.origin == &quot;Paris&quot;, Flight.duration &gt; 500)).all() SELECT * FROM flights WHERE origin = &#39;Paris&#39; OR duration &gt; 500 db.session.query(Flight, Passenger).filter(Flight.id == Passenger.flight_id).all() SELECT * FROM flights JOIN passengers ON flights.id = passengers.fought_id APIsHTTP Methods GET: retrieve resource POST: create a new resource PUT: replace a resource PATCH: update a resource DELETE: delete a resource Status Codes 200 OK 201 Created 400 Bad Request 403 Forbidden 404 Not Found 405 Method Not Allowed 422 Unprocessable Entity]]></content>
      <categories>
        <category>note</category>
        <category>CS50 Beyond</category>
      </categories>
      <tags>
        <tag>CS50</tag>
        <tag>beyond</tag>
        <tag>sql</tag>
        <tag>orms</tag>
        <tag>apis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CS50 Beyond Security and Scalability]]></title>
    <url>%2F2019%2F08%2F17%2Fnote%2FCS50%20Beyond%2Fsecurity%2F</url>
    <content type="text"><![CDATA[SecurityGitOpen souce has a trade-off, on one hand, everyone can see the source code so that everyone can help fix the bugs, on the other hand, everyone can look for potential vulnerabilities and then take advantage of it. Also, your git commit history is going to store the entire history, so if you make a commit that accidentally include your credentials. If you delete them in the later commit, the credentials are still there. That’s the potential risk. Be careful about that. FlaskSo when you are building your web application, you can save your key in the Environment Variable. In flask, you can set your secret key like this: app.config[&quot;SEVRET_KEY&quot;] = os.environ_get(&quot;SECRET_KEY&quot;) The way to add environment variable is:export SECRET_KEY=xxxxxxxxx (for Mac)set SECRET_KEY=xxxxxxxxx (for Windows) SQLStore PasswordsDon’t directly store the password in the database. Instead of directly store the password in the data base, you should store the hash version of password in the database. SQL InjectionWherever you are making SQL queries, either use a library or do the escape yourself to prevent you from SQL injection attack. JavaScriptCross-Site Scripting: Attackers will inject client-side scripts into web pages viewed by other users. e.g. In Flask If your code is like this: 123@app.route(&apos;/&lt;string:name&gt;&apos;)def hello(name): return &quot;Hello,&quot;+name When a viewer typed in /&lt;script&gt;alert(&#39;hi&#39;)&lt;/script&gt; An alert ‘hi’ will be raised. This can also happens when you have a form for a user to submit. Solution:For url inject, check “&lt;” and “&gt;” whenever you receive a request. For form submit, add CSRF token. CSRF token is a secret, user-specific token in all form submissions. ScalabilityBenchmarkingA test to see how many user can a server support. Solotions: Vertical Scaling: Get a bigger server Horizontal Scaling: Get more server Problems for Horizontal Scaling How does the server communicate with each other? Which server does the user go to when the come to the website? Solution: add a load balancer Load BalancingMethods to assign connections: Random Choice Round Robin Fewest Connections Session-Aware Load BalancingUser may store some information on the server, what happen when he goes to another server next time? So you need to store the session information. There are three ways to store them. Sticky Sessions (User always go to the same place) Sessions in Database Client-Side Sessions AutoscalingDynamically add servers to the Load Balancer. Use some sort of ping or heartbeat to make sure when a server is down, the load balancer knows. Scaling Databases But there’s another problem raised, a single database can only communicate with a limit number of connections. We use Database Replication to solve this problem Database ReplicationSingle-Primary Replication In single-primary replication, you can read from a number of database but can only read from one database. The you update other database from the writable database. This only solve the read problem but does not solve the write problem. Multi-Primary Replication Multi-Primary Replication solve the problem of read and write at the same time, but raise another problem: what if there’s conflicts? There can be a Git like system to solve this. CachingIf we can store the data in some other place, we may not need to access the data base so often. Client-Side CachingCache-ControlInside the HTTP headers, there’s a header called “Cache-Control”, where you can set the time of the data cache in the computer. Cache-Control: max-age=86400 means that if the user refresh the page less than 86400s after the first request, the browser will not make a request and use the cache data. ETagETag is a tag that is unique for each version of a big file on the server. When a big file is sent to the client, the ETag will be attached. When a browser make a request with the ETag, the web applictaion will not send it again if it is the latest version of that file. Server-Side Caching When there’s request to the database, the web applictaion will save a copy of it and the request inside of Cache, so the server can get the data more quickly in the cache and make less requests to the database.]]></content>
      <categories>
        <category>note</category>
        <category>CS50 Beyond</category>
      </categories>
      <tags>
        <tag>CS50</tag>
        <tag>beyond</tag>
        <tag>security</tag>
        <tag>scalability</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CS50 Beyond React]]></title>
    <url>%2F2019%2F08%2F17%2Fnote%2FCS50%20Beyond%2Freact%2F</url>
    <content type="text"><![CDATA[DeclarativeWrite code to tell the computer the way we want the web application to look like.JSXAn extension of JavaScript.In JSX we can treat HTML elements as values of their own. Packages React(The React library) ReactDOM(Insert React components into webpage) Babel(Translate JSX into JS) Scripts CDN: 123456React:&lt;script src=&quot;https://cdn.staticfile.org/react/16.4.0/umd/react.development.js&quot;&gt;&lt;/script&gt;ReactDOM:&lt;script src=&quot;https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;Babel:&lt;script src=&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;&gt;&lt;/script&gt; ComponentsBasic Structure123class Hello extends React.Component &#123;&#125; The Hello class is a React component. Each component need something to determine what should show up on the page, so each component needs a render function. 12345class Hello extends React.Component &#123; render() &#123; return &lt;p&gt;Hello!&lt;/p&gt;; &#125;&#125; So now all Hello class does is display a p tag. Example112345678910111213&lt;div id=&quot;codeexample1&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/babel&quot;&gt; class Hello extends React.Component &#123; render() &#123; return ( &lt;p&gt; This is render by React! &lt;/p&gt; ); &#125; &#125; ReactDOM.render(&lt;Hello /&gt;, document.querySelector(&quot;#codeexample1&quot;));&lt;/script&gt; class Hello extends React.Component { render() { return ( This is render by React! ); } } ReactDOM.render(, document.querySelector("#codeexample1")); Example2123456789101112131415161718192021222324&lt;div id=&quot;codeexample2&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/babel&quot;&gt; class Hello extends React.Component &#123; render() &#123; return ( &lt;p&gt; This is render by React! &lt;/p&gt; ); &#125; &#125; class App extends React.Component &#123; render() &#123; return ( &lt;div&gt; &lt;Hello/&gt; &lt;p&gt;Above and below are two Hello class.&lt;/p&gt; &lt;Hello/&gt; &lt;/div&gt; ) &#125; &#125; ReactDOM.render(&lt;App /&gt;, document.querySelector(&quot;#codeexample2&quot;));&lt;/script&gt; class Hello extends React.Component { render() { return ( This is render by React! ); } } class App extends React.Component { render() { return ( Above and below are two Hello class. ) } } ReactDOM.render(, document.querySelector("#codeexample2")); PropertiesSome arguments that attached to a class. Example3123456789101112131415161718192021222324&lt;div id=&quot;codeexample3&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/babel&quot;&gt; class Hello extends React.Component &#123; render() &#123; return ( &lt;p&gt; This is &#123;this.props.count&#125; &#123;this.props.name&#125; &lt;/p&gt; ); &#125; &#125; class App extends React.Component &#123; render() &#123; return ( &lt;div&gt; &lt;Hello count=&quot;Number1&quot; name=&quot;Hello Class&quot;/&gt; &lt;Hello count=&quot;Number2&quot; name=&quot;Hello Class&quot;/&gt; &lt;Hello count=&quot;Number3&quot; name=&quot;Hello Class&quot;/&gt; &lt;/div&gt; ) &#125; &#125; ReactDOM.render(&lt;App /&gt;, document.querySelector(&quot;#codeexample3&quot;));&lt;/script&gt; class Hello extends React.Component { render() { return ( This is {this.props.count} {this.props.name} ); } } class App extends React.Component { render() { return ( ) } } ReactDOM.render(, document.querySelector("#codeexample3")); Set the default value: Change This is {this.props.name} to This is {this.props.name || &quot;Hello Class&quot;} So now you can use the Hello class without “name”: &lt;Hello count=&quot;Number3&quot;/&gt; StateIn React, if you change the state of the application, the view of the application is going to change based on that.So if you want to update the page, just change the state of the application, no need to refresh the whole page. Construction FunctionConstruction function is a function Similar to the function __init__ in python.In React, construction function is constructor(props) e.g. 12345class Counter extends React.Component &#123; constructor(props) &#123; super(props); &#125;&#125; Because we are extending the React.Component, and our React codes for our components to work need to use these props, we need to add a line of code super(props); Example4A counter class. 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;div id=&quot;codeexample4&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/babel&quot;&gt; class Counter extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; count: 0 &#125; &#125; render() &#123; return ( &lt;div&gt; &lt;p&gt;&#123;this.state.count&#125;&lt;/p&gt; &lt;button onClick=&#123;this.increment&#125;&gt;+&lt;/button&gt; &lt;button onClick=&#123;this.dncrement&#125;&gt;-&lt;/button&gt; &lt;/div&gt; ); &#125; increment = () =&gt; &#123; this.setState(oldState =&gt; (&#123; count: oldState.count+1 &#125;)); &#125; dncrement = () =&gt; &#123; this.setState(oldState =&gt; (&#123; count: oldState.count-1 &#125;)); &#125; &#125; class App extends React.Component &#123; render() &#123; return ( &lt;div&gt; &lt;Counter /&gt; &lt;Counter /&gt; &lt;Counter /&gt; &lt;/div&gt; ) &#125; &#125; ReactDOM.render(&lt;App /&gt;, document.querySelector(&quot;#codeexample4&quot;));&lt;/script&gt; class Counter extends React.Component { constructor(props) { super(props); this.state = { count: 0 } } render() { return ( {this.state.count} + - ); } increment = () => { this.setState(oldState => ({ count: oldState.count+1 })); } dncrement = () => { this.setState(oldState => ({ count: oldState.count-1 })); } } class App extends React.Component { render() { return ( ) } } ReactDOM.render(, document.querySelector("#codeexample4")); NOTE: In React, you are not allow to modify the state directly, you need to use the setState function to change the state. oldState: It is considered a poor design to reference this.state inside of the setState function. Because this may cause a race condition where you run two setState function at a similar time.In practice, you should use a function to take in the state first, then change it based on your new function.This function often called oldState So now when you render many Counter components, you can have many counters and each counter has its own state. Ternary Operator: condition ? expressionIfTrue : expressionIfFalse Some Useful JS ToolsList OperationCopy of a List12const list1 = [1, 2, 3, 4, 5];const list2 = [...list1]; Copy Then Add12const list1 = [1, 2, 3, 4, 5];const list2 = [...list1, 6]; Delete From List1234const list1 = [1, 2, 3, 4, 5];list1.splice(3, 1);// Starting from index 3, pull out 1 argument.// list1 is now [1, 2, 3, 5] NodeWhen you actually deploy your website, you would not want the browser to translate your JSX code everytime when someone open the webpage.You need something to translate the JSX code to JS code before deploy for you. An app “create-react-app” is recommended. To install the “create-react-app”, you need Node.js. After you install the “create-react-app”, you can create a new React application just by type in create-react-app Name-of-the-app in the CLI. After you modify your code in the “src” directory, run npm run build, the program will build your application for you. Include translate JSX to JS.]]></content>
      <categories>
        <category>note</category>
        <category>CS50 Beyond</category>
      </categories>
      <tags>
        <tag>CS50</tag>
        <tag>beyond</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CS50 Beyond Javascript]]></title>
    <url>%2F2019%2F08%2F16%2Fnote%2FCS50%20Beyond%2Fjs%2F</url>
    <content type="text"><![CDATA[Two Ways of Adding JS in HTMLScript Tag123&lt;script&gt; your JS code&lt;/script&gt;Seperate File1&lt;script src=&quot;xxx.js&quot;&gt;&lt;/script&gt; NOTE: JS code can be added everywhere in the HTML file, not only in the &lt;head&gt; tag. HTML file is loaded from top to bottom. Be careful because the location of your JS code may cause bugs in your webpage. Call the JavaScript CodeCall in the HTML1&lt;button event_name=&quot;function_name&quot;&gt;xxx&lt;/button&gt; Call in the JS fileUse querySelector. DOM(Document Object Model) ManipulationquerySelectorSelect the first element in the document. document.querySelector(&#39;tag&#39;) document.querySelector(&#39;#id&#39;) document.querySelector(&#39;.class&#39;) querySelector returns an object. object.innerHTML is the content of the element. So object.innerHTML = xxx can change the content of the element to xxx. You can also modify the style by object.style.xxx NOTE: If you want to select every element in the document, use querySelectorAll, it will return an array of object. addEventListenerdocument.addEventListener(&quot;DOMContentLoaded&quot;, function) the function you passed in will be executed after all the DOM content loaded. Used to fix the problem that JS code loaded at the front of the HTML document. Arrow Functionsx =&gt; x*2 Takes the left of the arrow and output the right of the arrow. Local StorageLocal storage is a place where you can save the data locally forever. It’s about 5M. You can use this feature to save your data so that it won’t change when the user refresh the page. Command Purpose localStorage.setItem(&quot;temp&quot;, arr) Save arr locally to “temp” localStorage.getItem(&quot;temp&quot;) Get the data in “temp” localStorage.removeItem(&quot;temp&quot;) Remove “temp” localStorage.clear() Clear local storage Window Property Description window.innerHeight Returns the height of the window’s content area window.innerWidth Returns the width of the window’s content area window.scrollY Returns the pixels that the current document has been scrolled from the top of the window document.body.offSetHeight Returns the height of the whole document AnimationCSS AnimationKeyframeIn &lt;style&gt; tag. Code123456789101112131415161718192021222324252627@keyframes grow &#123; 0% &#123; left: 0%; color: red; font-size: 14px; &#125; 50% &#123; left: 50%; color: blue; font-size: 20px; &#125; 100% &#123; left: 0%; color: green; font-size: 26px; &#125;&#125; .example &#123; position: relative; animation-name: grow; animation-fill-mode: forwards; animation-duration: 3s; animation-iteration-count: infinite; &#125;&#125;&lt;p class=&quot;example&quot;&gt;Hello!&lt;/p&gt; Effect @keyframes grow { 0% { left: 0%; color: red; font-size: 14px; } 50% { left: 50%; color: blue; font-size: 20px; } 100% { left: 0%; color: green; font-size: 26px; } } .example { position: relative; animation-name: grow; animation-fill-mode: forwards; animation-duration: 3s; animation-iteration-count: infinite; } } Hello! SVGSVG is the abbreviation of Scalable Vector GraphicsSVG is resolution independent, the resolution of it won’t change when zoom in. The following code is based on the d3.js library Draw Elements 1234567891011&lt;svg id=&quot;svgexample1&quot; stylt=&quot;width:100%; height:800px&quot;&gt;&lt;/svg&gt;&lt;script&gt;const svg = d3.select(&apos;#svgexample1&apos;);svg.append(&apos;circle&apos;) .attr(&apos;cx&apos;, 200) (center x) .attr(&apos;cy&apos;, 75) (center y) .attr(&apos;r&apos;, 50) (radius) .style(&apos;fill&apos;, &apos;red&apos;); (filled color)&lt;/script&gt; const svg = d3.select('#svgexample1'); svg.append('circle') .attr('cx', 200) .attr('cy', 75) .attr('r', 50) .style('fill', 'red'); Animation123456789101112131415161718&lt;svg id=&quot;svgexample2&quot; stylt=&quot;width:100%; height:800px&quot;&gt;&lt;/svg&gt;&lt;script&gt;const svg = d3.select(&apos;#svgexample2&apos;);const c = svg.append(&apos;circle&apos;) .attr(&apos;cx&apos;, 200) .attr(&apos;cy&apos;, 75) .attr(&apos;r&apos;, 25) .style(&apos;fill&apos;, &apos;red&apos;);c.transition() .duration(1000) .attr(&apos;cx&apos;, 500) .style(&apos;fill&apos;, &apos;green&apos;) .attr(&apos;r&apos;, 50)&lt;/script&gt; The Code above will draw a red circle whose radius is 25, then the circle will move to the right while becomming bigger and turning ino green.]]></content>
      <categories>
        <category>note</category>
        <category>CS50 Beyond</category>
      </categories>
      <tags>
        <tag>CS50</tag>
        <tag>beyond</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CS50 Beyond HTML and CSS]]></title>
    <url>%2F2019%2F08%2F15%2Fnote%2FCS50%20Beyond%2Fcss%2F</url>
    <content type="text"><![CDATA[HTMLHTML5 featuresCommon HTML elements tag usage &lt;h1&gt;, ..., &lt;h6&gt; header tag &lt;ol&gt;, &lt;ul&gt; order list/ unorder list &lt;img&gt; image tag &lt;a&gt; anchor tag(often for href) &lt;p&gt; paragraph tag &lt;table&gt; paragraph tag &lt;th&gt; table header &lt;tr&gt; table row &lt;td&gt; table data &lt;form&gt; form tag ID attributeInsert in any tag. In &lt;a&gt; tag, href=”#the ID of that place“ can create a link to that specific place.ID can only be used once in the same page. New HTML5 Featurescontenteditablecontenteditable is an attribute of paragraph Code1&lt;p contenteditable=&quot;true&quot;&gt;This paragraph is editable&lt;/p&gt; EffectThis paragraph is editable datalistdatalist is a tag, it enables auto complete Code1234567891011&lt;div&gt; &lt;input name=&quot;junk&quot; list=&quot;some junk&quot; /&gt; &lt;datalist id=&quot;some junk&quot;&gt; &lt;option value=&quot;aa11&quot;&gt; &lt;option value=&quot;ab12&quot;&gt; &lt;option value=&quot;ac13&quot;&gt; &lt;option value=&quot;bc23&quot;&gt; &lt;option value=&quot;ca31&quot;&gt; &lt;option value=&quot;cb32&quot;&gt; &lt;/datalist&gt;&lt;/div&gt; Effect patternpattern is an attribute of the input tagIt accept a regular expression Code1234&lt;form&gt; &lt;input pattern=&quot;.*\..*&quot; placeholder=&quot;something.something&quot;&gt; &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;&lt;/form&gt; NOTE: Don’t use pattern as the only verification process. Users can modify the source code to bypass that. Never trust your user. Effect Submit Regular Expressions Use in string searching algorithms Basic Operations Concatenation Alternation Kleene Star Expression Matches hi hi hi|hello hi or hello hi? h or hi hi* h/hi/hii/hiii/... (from 0 to infinite) hi+ hi/hii/hiii/... (from 1 to infinite) hi{3} hiii . anything \./\+/… ./+ \ is the escape character \s white space [a-z]/[A-Z]/[0-9] a to z/A to Z/0 to 9 NOTE: Those marks only apply on the one before them CSSCSS Properties color text-align width, height margin, padding font-family, font-size, font-weight border Styling WaysInline Styling: 123456789&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Style&lt;/tile&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 style=&quot;color:red;&quot;&gt;This is red&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; Use of Selector: 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Style&lt;/tile&gt; &lt;style&gt; h1 &#123; color:red; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;This is red&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; Selector Selector Example Description element h1 Select every h1 element .class .welcome Select every element whose class is welcome #id #welcome Select the element whose id is welcome element, element h1, div Select every h1 and div element element element div h1 Select every h1 that is inside div element&gt;element div&gt;h1 Select every h1 that is an immediate children of div element+element div+h1 Select every h1 that is right after div [attribute=value] [target=1] Select every element that has target=1 :hover button:hover Acts when a button has the cursor hover over it CSS Box ModelAll element in the HTML has a border. Outside of the border there is comething called the Margin. Inside the border there is something called Padding. Responsive DesignViewport: The visible area of the webpage on the screen 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width initial-sacle=1.0&quot;&gt; width=device-width means that the width of the webpage is equal to the device’s widthinitial-scale=1.0 means that at the beginning, do not zoom the webpage Media Query: Let you customize the CSS you use based upon the type of the media of the user that is viewing the page. Inside the “Style tag” 123@media (min-width 500px) &#123; Just the same as others&#125; The above only got to apply when the page is at least 500 pixels wide 123@media (max-width 499px) &#123; Just the same as others&#125; The above only got to apply when the page is at most 499 pixels wide 123@media print &#123; Just the same as others&#125; The above only got to apply when the page is printed out Flex Box: It is a technology that automatically wrap the page for you. Inside the “Style” tag 1234selector &#123; display: flex; flex-wrap: wrap;&#125; Grid Model: Display like grid Inside the “Style” tag 1234567selector &#123; display: grid; flex-wrap: wrap; grid-column-gap: xxx; (in pixel) grid-row-gap: xxx; (in pixel) grid-template-columns: xxx;&#125;]]></content>
      <categories>
        <category>note</category>
        <category>CS50 Beyond</category>
      </categories>
      <tags>
        <tag>CS50</tag>
        <tag>beyond</tag>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CS50 Beyond Git and Github]]></title>
    <url>%2F2019%2F08%2F15%2Fnote%2FCS50%20Beyond%2Fgit%2F</url>
    <content type="text"><![CDATA[Git Commands command usage git clone &lt;url&gt; Clone the repository to local git init initiallize a repository locally git add &lt;filename&gt; add the file to the workspace git commit -m &quot;message&quot; commit the change in the workspace git status Show the status of your files git push push to remote repository git pull pull from remote repository git commit -am &quot;message&quot; add every untracked file into workspace then commit git log show the log of git change git reset --hard &lt;commit&gt; go back for one version git branch show the branches that currently have git checkout -b &lt;branch name&gt; create a new branch git checkout &lt;branch name&gt; switch to an existed branch git merge &lt;branch name&gt; merge current branch with that branch git branch -D &lt;branch name&gt; delete the branch Pull RequestIn industry, they don’t let everyone to modify the code base, instead, you should make change on different branch and then summit a pull request so that someone else can do a review and comment and then merge the branches. So pull request is a request to merge your branch into the master branch. And it is widely used in the inductry. SassSass is an extension of CSS that allows you to use variable and nesting. Link a seperate CSS file1&lt;link rel=&quot;stylesheet&quot; href=&quot;address of the css file&quot;&gt; VariableFor Sass file, file extension is .css $ as the mark of variable, $variable_name is a complete variable 12345$color: red;ul &#123; color=$color;&#125; Above is a complete SASS file. CompileSASS file can’t be directly linked to the HTML file. Download the SASS program then run it, it will convert SASS file to CSS file for you. Use the command sass xxx.scss xxx.css Nesting1234567891011div &#123; xxxxxx p &#123; xxxxx &#125; ul &#123; xxxxx &#125;&#125; You can use the above code to directly apply CSS to that structure in Sass. InheritenceInheritence in Sass use the % sign. 12345678910%extend &#123; xxx xxx&#125;#id &#123; @extend %extend; xxx xxx&#125; Properties in %extend will also effect in #id]]></content>
      <categories>
        <category>note</category>
        <category>CS50 Beyond</category>
      </categories>
      <tags>
        <tag>CS50</tag>
        <tag>beyond</tag>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Tips]]></title>
    <url>%2F2019%2F08%2F13%2Fnote%2Fhexo%2Fhexotips%2F</url>
    <content type="text"><![CDATA[This post is aiming at storing some tips of useing hexo. ListsCode12345678910111. One2. Two3. Three* One* Two- One- Two - two spaces before the dash - two spaces before the dash The effect of the code above One Two Three One Two One Two two spaces before the dash two spaces before the dash ExtrasCode12- [x] This is a complete item- [ ] This is an incomplete item The effect of the code above This is a complete item This is an incomplete item TabsCode12345678&#123;% tabs tabs_name %&#125;&lt;!-- tab first tab@heart --&gt;first&lt;!-- endtab --&gt;&lt;!-- tab second tab--&gt;second&lt;!-- endtab --&gt;&#123;% endtabs %&#125; NOTICE: tabs must have unique name The effect of the code abovefirst tabsecond tabfirstsecond TableCode1234name | 111 | 222 | 333 | 444:-: | :-: | :-: | :-: | :-:aaa | bbb | ccc | ddd | eee|fff | ggg| hhh | iii | 000| The effect of the code above name 111 222 333 444 aaa bbb ccc ddd eee fff ggg hhh iii 000 Centered QuoteCode1&#123;% centerquote %&#125;This is Centered Quote&#123;% endcenterquote %&#125; Or 1&#123;% cq %&#125;This is Centered Quote&#123;% endcq %&#125; The effect of the code aboveThis is Centered Quote Full ImageThis tag enables you to exceed the container’s width. Code1&#123;% fullimage /hexo/hexo.svg, alt, title %&#125; Or 1&#123;% fi /hexo/hexo.svg, alt, title %&#125; The effect of the code above Bootstrap CalloutCode1&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125; class_name is one of the following: default | primary | success | info | warning | danger The effect of the code above Bootstrap Callout default Bootstrap Callout primary Bootstrap Callout success Bootstrap Callout info Bootstrap Callout warning Bootstrap Callout danger Include RawCode1&#123;% include_raw &apos;/404/404.md&apos; %&#125; This tag include any raw content into your posts. Path is relative to your site “source” directory. The effect of the code above404 Not Found(Just For Test) ButtonUsage1234567891011&#123;% button url, text, icon [class], [title] %&#125;&lt;!-- Tag Alias --&gt;&#123;% btn url, text, icon [class], [title] %&#125;url : Absolute or relative path to URL.text : Button text. Required if no icon specified.icon : FontAwesome icon name (without &apos;fa-&apos; at the begining). Required if no text specified.[class] : FontAwesome class(es): fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5x Optional parameter.[title] : Tooltip at mouseover. Optional parameter. Code1&#123;% btn # ,This Page, home fa-2x, Just This Page%&#125; NOTE:It’s better to put them into the “&lt;div&gt;” tag, this may avoid some bug The effect of the code aboveThis Page Group PictureUsage12345&#123;% grouppicture [group]-[layout] %&#125;&#123;% endgrouppicture %&#125;&#123;% gp [group]-[layout] %&#125;&#123;% endgp %&#125;[group] : Total number of pictures to add in the group.[layout] : Default picture under the group to show. Code12345678&#123;% gp 6-3%&#125;![](hexo/github.png)![](hexo/github.png)![](hexo/github.png)![](hexo/github.png)![](hexo/github.png)![](hexo/github.png)&#123;% endgp %&#125; The effect of the code above LabelUsage123456&#123;% label [class]@Text %&#125;[class] : default | primary | success | info | warning | danger. &apos;@Text&apos; can be specified with or without space E.g. &apos;success @text&apos; similar to &apos;success@text&apos;. If not specified, default class will be selected. Code1&#123;% raw %&#125;&#123;% label default@default %&#125;&#123;% endraw %&#125; &#123;% raw %&#125;&#123;% label primary@primary %&#125;&#123;% endraw %&#125; &#123;% raw %&#125;&#123;% label success@success %&#125;&#123;% endraw %&#125; &#123;% raw %&#125;&#123;% label info@info %&#125;&#123;% endraw %&#125; &#123;% raw %&#125;&#123;% label warning@warning %&#125;&#123;% endraw %&#125; &#123;% raw %&#125;&#123;% label danger@danger %&#125; &#123;% raw %&#125;&#123;% label success@success%&#125;&#123;% endraw %&#125; The effect of the code abovedefault primary success info warning danger success VideoCode1&#123;% video url %&#125; PDFSettingsnext/_config.yml 1234pdf: enable: true # Default height height: 500px Usage1234&#123;% pdf url [height] %&#125;[url] : Relative path to PDF file.[height] : Optional. Height of the PDF display element, e.g. 800px. Code1&#123;% pdf hexo.pdf %&#125; NOTE: Unlike images, you don’t need to add your post assets folder in front of the address. The effect of the code above Referencehttps://theme-next.org/docs/tag-plugins/http://theme-next.iissnan.com/tag-plugins.htmlGithub Flavored Markdown]]></content>
      <categories>
        <category>note</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>tips</tag>
        <tag>note</tag>
        <tag>usage</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Insert Image in Hexo Blog]]></title>
    <url>%2F2019%2F08%2F13%2Farticle%2Fhexo%2Fimage%2F</url>
    <content type="text"><![CDATA[Modify ConfigModify post_asset_folder in _config.yml to true. Install packagesexecute npm install https://github.com/CodeFalling/hexo-asset-image --save and wait. WARNING: Some may tell you to install via npm install hexo-asset-image --save, don’t do that, that package has bug. Put in ImagesAfter those steps, when you create a new post, hexo will auto generate a folder under the same folder with the same name of your post. Put your images into the correct folder Use ItFirst WaySecond WayThird Way{% asset_img example.jpg examplename %}![description][1][1]:picture_path &quot;picture_name&quot; ]![description][picture_name]]]></content>
      <categories>
        <category>article</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>hexo</tag>
        <tag>image</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Some Escape for Jinja, Hexo and HTML]]></title>
    <url>%2F2019%2F08%2F12%2Fnote%2Fpython%2Fescape%2F</url>
    <content type="text"><![CDATA[Jinja takes “{{“, “}}“, “{%“, “%}“ as symbols for statements/expressions.So if you want to use these symbols in your text of a Jinja Templated HTML file, put them in 123&#123;% raw %&#125; your content&#123;% endraw %&#125; Hexo seems to use something like Jinja, so that also works when you are writing markdown file of hexo.Or Hexo will raise an “unexpected token” template render error. For some special symbol in HTML, like &amp;lt;(“&lt;”), &amp;gt;(“&gt;”) Change &amp; to &amp;amp;]]></content>
      <categories>
        <category>note</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>template</tag>
        <tag>jinja</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Template and Static Folder Setting in Flask Blueprint]]></title>
    <url>%2F2019%2F08%2F12%2Farticle%2Fpython%2Fblueprint%2F</url>
    <content type="text"><![CDATA[Settings1bp = Blueprint(xxxxxxx, template_folder=&apos;templates&apos;, static_folder=&apos;static&apos;)How to UseFlask treat them differently:Template Folder For template folder, when you register your blueprint, flask will add the address of blueprint template folder into its config. All contents under all blueprint/original template folder will be treated as if they are in a same big folder “template”. If there are templates of the same name, Flask will search the original template folder first and then the blueprint folders. The solution is to create a folder with the same name in the blueprint’s template folder, so you can use it like your static folder. Static FolderFor static folder, the blueprint’s static folder address will be register to the blueprint. So you can reference it wherever in your Flask app by: &quot;blueprintName&quot;.static]]></content>
      <categories>
        <category>article</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>blueprint</tag>
        <tag>template</tag>
        <tag>static</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Update Bokeh Figure's X/Y Range]]></title>
    <url>%2F2019%2F08%2F12%2Fnote%2Fpython%2Fxrange%2F</url>
    <content type="text"><![CDATA[To update bokeh figure’s x_range/y_range, you should use: 1234&quot;plotname&quot;.x_range.start = xxx&quot;plotname&quot;.x_range.end = xxx&quot;plotname&quot;.y_range.start = xxx&quot;plotname&quot;.y_range.end = xxx]]></content>
      <categories>
        <category>note</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>bokeh</tag>
        <tag>figure</tag>
        <tag>range</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Properties of Bokeh Daterangeslider that Helps Develop]]></title>
    <url>%2F2019%2F08%2F10%2Farticle%2Fpython%2Fdaterangeslider%2F</url>
    <content type="text"><![CDATA[IntroductionThis article is about two special property of Daterangeslider in bokeh, which can help develop your bokeh app.My bokeh version is 1.3.1.Body According to the official documentation, Bokeh Daterangeslider has two property method: value_as_date and value_as_datetime. Normally, when you called the on_change callback function, bokeh will return you a tuple of Unix timestamp in miliseconds. It’s very inconvinient to change the format of the datetime. So you can call daterangeslider.value_as_date or daterangeslider.value_as_datetime (remember this is property not method) in your callback function. Both will return you a tuple of datetime.date object, which can be conveniently turned into any format of datetime via its own strftime method. Yet anothor way of using property method doesn’t work. You can’t simply pass in value_as_date or value_as_datetime in the on_change method. e.g. daterangeslider.on_change(&quot;value_as_date&quot;, on_change) This will raise an error]]></content>
      <categories>
        <category>article</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>bokeh</tag>
        <tag>daterangeslider</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Embed Bokeh Application in Flask]]></title>
    <url>%2F2019%2F08%2F10%2Farticle%2Fpython%2Fembed%2F</url>
    <content type="text"><![CDATA[This article is based on the official document of Bokeh and is about embed bokeh application in flask using app sessions.What you need to do is to pull a session from a bokeh server, turn it into script and insert it into your template. So you need to set up a bokeh server first. bokeh serve --show &quot;your bokeh file address&quot; Keep it open. Due to Bokeh’s safety settings, you need to set allow web-socket origin to avoid errors when you are setting up your bokeh server. 123bokeh serve --show &quot;your bokeh file address&quot;--allow-websocket-origin=localhost:5006 (This is bokeh server&apos;s default port, if you reset the port, change it to the port you set)--allow-websocket-origin=&quot;your web page address that you want to embed your bokeh app&quot; Then you need to complete your route function: 1234def bkapp_page(): with pull_session(url=&quot;http://localhost:5006/&#123;your bokeh file name&#125;&quot;) as session: script = server_session(session_id=session.id, url=&apos;http://localhost:5006/&#123;your bokeh file name&#125;&apos;) (As the above, change the port if you reset it yourself) return render_template(&quot;your template&quot;, script=script, template=&quot;Flask&quot;) Don’t forget to import the functions you need 12from bokeh.client import pull_sessionfrom bokeh.embed import server_session Finally, put the script into your template. In the body part of the template: Put in: {{script|indent(n)|safe}} “{{}}“ is the jinja representation of codescript is the script that you put in the render_template functionindent(n) means the number of spaces of where you put your script (Just for beautify your code)safe means that Jinja won’t take care of some illegal symbol for you(like “&lt;&gt;”, which normally will be turned into “&lt;” and “&gt;”) So now you complete embed your bokeh app in your flask app. Run your app.py for a test!]]></content>
      <categories>
        <category>article</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>bokeh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Deploy a Flask app to Tencent Cloud]]></title>
    <url>%2F2019%2F07%2F17%2Farticle%2Fcloud%2Fdeploy%2F</url>
    <content type="text"><![CDATA[This article is about my way to deploy my own flask app on cloud.I use the service provided by Tencent Cloud, which uses CentOS 7.2 as the operating system of the CVM.I use gunicorn to deploy the my flask app and use nginx to do reverse proxy. 1234Install python3 and set symbolic linksCreate virtual environmentInstall and configure NginxInstall and configure gunicorn Install Python3CentOS 7.2 uses python 2.7.5 to support the “yum” command. So what we have to do is: 123Install Python3Set default python version to 3Set default python version of yum to 2 Preinstall Packages123456789yum install gcc gcc-c++ # C compiler that used to compile pythonyum install make # C make libraryyum install -y openssl openssl-devel openssl-static # SSL support packageyum install bzip2-devel # decompression support packageyum install expat-devel # XML document resolve packageyum install gdbm-devel # gdbm database libraryyum install readline-devel # Auto complete support packageyum install sqlite-devel # sqlite support packageyum groupinstall -y &quot;Development tools&quot; # install development tools InstallI choose python version 3.6.4 because it is stable.Download 1wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz Decompress 1tar -zxvf Python-3.6.4.tgz Change directory 1cd Python-3.6.4 Configure and Install 12./configure prefix=/usr/local/python3make &amp;&amp; make install Create symbolic links for python and pip12ln -s /usr/local/python3/bin/python3 /usr/bin/pythonln -s /usr/local/python3/bin/pip3 /usr/bin/pip -s: for symbolic links/usr/local/python3/bin/python3: source directory/usr/bin/python: target directory So now when you type python, you’ll call python3, and python2 for python2. You can call python -V and python2 -V to check that. Because yum still needs python2, we need to change yum’s configuration file. Type ls -ol yum* to find the configuration file. Do the following change to all the file listed: #!/usr/bin/python –&gt; #!/usr/bin/python2 You may use vi editor vi yum (vi+directory) to edit them. Virtual EnvironmentWhen using two different version of the same package, virtual environment can prevent you from keeping installing can uninstalling the packages. Install virtualenvpip install virtualenv to install Create virtual environment1/usr/local/python3/bin/virtualenv -p /usr/bin/python3 venv /usr/local/python3/bin/virtualenv: the directory of the virtualenv package/usr/bin/python3: the base of your virtual environmentvenv: the name of the virtual environment This command will create a virtual environment under the current directory. source venv/bin/activate activate the virtual environment, venv is the name of your virtual environment deactivate exit the current virtual environment Install Python Packagesuse pip install xxx, xxx is the package you want to install pip install -r requirement.txt when you have all your requirement in the requirement.txt file To generate requirement.txt, pip freeze &gt; requirements.txt in your own computer gunicornInstallWhen the virtual environment is activate, run pip install gunicorn Start the service1gunicorn -w 4 [-D] -b 127.0.0.1:8000 wsgi:application -w: the number of progress you want gunicorn to start-D: start the service background-b: bind your service to the certain IP, you should put tour LAN IP with the port you want to specify here.wsgi: the manage filename of your flask appapplication: the variable name in your flask app NginxInstall Nginx1yum install nginx After installation, use rpm -ql nginx to check the installation directory. commands of Nginx 1234567service nginx startservice nginx stopservice nginx restartservice nginx reload # reload the service after changing the configuration file Now you can see the Nginx welcome page when you type in your WAN IP in your own brower. Change Configuration FileThe configuration file is located in /etc/nginx/nginx.conf use vi editor to edit vi /etc/nginx/nginx.conf change the “server” section to the following 12345678910server &#123; listen 80; # the port you want Nginx to listen server_name &quot;the url of your website&quot;; location / &#123; proxy_pass &quot;the LAN and port you specify in gunicorn&quot;; proxy_set_header Host $&quot;the port you specify in gunicorn&quot;; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125;&#125; Finally, service nginx reload to end config Kill Process When Something Happenedpstree -ap | grep gunicorn to show processes associate with gunicornkill -9 xxx “xxx” is the pid showed above, kill the processesnetstat -ntlp to show all the ports that is occupied]]></content>
      <categories>
        <category>article</category>
        <category>cloud</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>gunicorn</tag>
        <tag>nginx</tag>
        <tag>centos</tag>
        <tag>deploy</tag>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python Crawler that Deal with ajax]]></title>
    <url>%2F2019%2F07%2F06%2Farticle%2Fpython%2Fajax%2F</url>
    <content type="text"><![CDATA[Have you met this problem? When you are going to crawl down some data from a website, you find nothing in the source code? When searching on the search engines, you may encounter the word “ajax”. According to Wikipedia, ajax is a web technologies on the client side to create asynchronous web applications. It means that the web page can load the data without refresh the whole page. I will walk through the path that I crawl ajax data. Hope this can inspire you when designing your own program. Follow the Common WayMy goal is to crawl down the op.gg “Game Stat by Champion” page’s data. Check the Source CodeFirst, open Chrome, press ctrl+U to callout the source code. We try to search the first champions’ name “Sivir”. There is no “Sivir” in the source code. That means the website used some technique to load the data after the page is loaded. It’s now to take out our most powerful tool – Chrome DevTools Use Chrome DevToolsChrome DevTools is a set of web developer tools built in the Google Chrome browser. DevTools can help us analyse the website’s structure. NetworkWe notice that there’s some query buttons above the chart. The network page enables us to monitor all the queries and links that is activate after we turn the DevTools on. So we callout the network page and click those query buttons. We get this: https://www.op.gg/statistics/ajax2/champion/ We clicked it, found data in it. But our job is not done yet. No matter what button we clicked, we always get the same url, the same data. It seems that we missed some query values. It’s time for elements. ElementsIn the elements, find where the buttons are. We can easily find that there’s several “Cell” td class and “ButtonWrap” div class in each “Cell” class. Look inside the “RadioButton” class, we can find the query values. “name” is the query name, in this case it is “period”, and “value” is the query value, in this case it is “week”. So we can get an url https://www.op.gg/statistics/ajax2/champion/period=week and it works. Look through all “Cell” class and then we can get all the query names and query values. Then we can get all the data. ConclusionThe way to get data from ajax loading page is:123Search the source code.Activate query and monitor connection using NetworkInspect Elements to get query names and values]]></content>
      <categories>
        <category>article</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>crawler</tag>
        <tag>ajax</tag>
        <tag>op.gg</tag>
      </tags>
  </entry>
</search>
